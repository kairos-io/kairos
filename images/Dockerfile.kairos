ARG BASE_IMAGE
ARG FLAVOR
ARG FLAVOR_RELEASE
ARG FRAMEWORK_VERSION=master
ARG MODEL=generic
# Not to be confused with the concept of MODEL, this is either fips or generic
ARG SECURITY_PROFILE=generic
ARG VARIANT
ARG VERSION


FROM quay.io/kairos/framework:${FRAMEWORK_VERSION}_${SECURITY_PROFILE} AS framework

FROM ${BASE_IMAGE} AS base
# Originally done in Earthly
COPY --from=framework / /

RUN rm -rf /etc/ssh/ssh_host_*

COPY naming.sh /usr/local/bin/naming.sh

RUN sed -i -n '/KAIROS_/!p' /etc/os-release

# need to be defined after FROM for them to be replaced in the RUN bellow
ARG FLAVOR
ARG FLAVOR_RELEASE
ARG VARIANT
ARG OS_ID=kairos
ARG HOME_URL="https://github.com/kairos-io/kairos"
ARG BUG_REPORT_URL="https://github.com/kairos-io/kairos/issues"
ARG GITHUB_REPO="kairos-io/kairos"
# TODO: merge these
ARG VERSION
ARG FAMILY
ARG MODEL
ARG REGISTRY_AND_ORG="quay.io/kairos"
ARG K3S_VERSION
ARG TARGETARCH
ARG OS_NAME=kairos-${VARIANT}-${FLAVOR}-${FLAVOR_RELEASE}
ENV KAIROS_VERSION="${VERSION}${K3S_VERSION:+-k3s$K3S_VERSION}"
ENV OS_VERSION=${KAIROS_VERSION}
ENV OS_LABEL=${KAIROS_VERSION}
RUN OS_LABEL=$(naming.sh container_artifact_label) \
    OS_REPO=$(naming.sh container_artifact_repo) \
    ARTIFACT=$(naming.sh bootable_artifact_name) \
    envsubst >>/etc/os-release </usr/lib/os-release.tmpl
RUN naming.sh container_artifact_name > /IMAGE

# TODO no benefit of keaping it?
# RUN rm /usr/local/bin/naming.sh

FROM base AS core

FROM base AS standard
ARG K3S_VERSION
RUN luet install -y system/provider-kairos
RUN luet install -y k8s/k3s-systemd@${K3S_VERSION} utils/edgevpn utils/k9s utils/nerdctl container/kubectl utils/kube-vip
RUN luet database get-all-installed --output /etc/kairos/versions.yaml

FROM ${VARIANT} AS final

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
# TODO what about NOT building initrd for the UKI?
# TODO what about caches?
RUN kernel=$(ls /lib/modules | head -n1) && depmod -a "${kernel}"
# Regenerate initrd if necessary
RUN if [ -f "/usr/bin/dracut" ]; then \
      kernel=$(ls /lib/modules | head -n1) && \
      dracut -f "/boot/initrd-${kernel}" "${kernel}" && \
      ln -sf "initrd-${kernel}" /boot/initrd; \
    fi
# Proper config files with immucore and custom initrd should already be in there installed by framework
RUN if [ -f "/sbin/mkinitfs" ]; then \
      kernel=$(ls /lib/modules | head -n1) && \
      mkinitfs -o /boot/initrd "${kernel}"; \
    fi

RUN rm -rf /tmp/*
RUN luet cleanup
RUN rm -rf /var/luet
