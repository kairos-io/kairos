# This file is auto-generated with the command: earthly +kairos-dockerfile --FAMILY=debian
###############################################################
####                           ARGS                        ####
###############################################################
# TARGETARCH is used to determine the architecture of the image, it is already set by Docker so it doesn't need to be defined here
ARG FAMILY=debian
ARG FLAVOR
ARG FLAVOR_RELEASE
ARG MODEL=generic
ARG BASE_IMAGE=debian:testing
ARG VARIANT
ARG VERSION
ARG FRAMEWORK_VERSION=main

###############################################################
####                     Upstream Images                   ####
###############################################################

# we use testing for amd64 because zfsutils-linux is not available in bookworm
FROM $BASE_IMAGE AS amd64-upstream
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates
RUN <<EOF
echo "deb https://ftp.debian.org/debian bookworm main contrib" >> /etc/apt/sources.list.d/kairos.list
EOF

FROM $BASE_IMAGE AS arm64-upstream

###############################################################
####                          Common                       ####
###############################################################
FROM ${TARGETARCH}-upstream AS common

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
    binutils \
    cloud-guest-utils \
    conntrack \
    console-setup \
    coreutils \
    cryptsetup \
    curl \
    debianutils \
    dmraid \
    dosfstools \
    dracut \
    dracut-live \
    dracut-network \
    e2fsprogs \
    e2fsprogs-l10n \
    efibootmgr \
    ethtool \
    firmware-linux-free \
    fuse3 \
    gawk \
    gdisk \
    gnupg \
    gnupg1-l10n \
    grub2-common \
    haveged \
    iproute2 \
    iptables \
    iputils-ping \
    isc-dhcp-common \
    isc-dhcp-client \
    jq \
    krb5-locales \
    less \
    libatm1 \
    libglib2.0-data \
    libgpm2 \
    libldap-common \
    libnss-systemd \
    libpam-cap \
    libsasl2-modules \
    lvm2 \
    mdadm \
    nano \
    nbd-client \
    ncurses-term \
    neovim \
    nfs-common \
    nftables \
    nohang \
    open-iscsi \
    openssh-server \
    open-vm-tools \
    os-prober \
    parted \
    patch \
    pigz \
    pkg-config \
    polkitd \
    psmisc \
    publicsuffix \
    python3-pynvim \
    rsync \
    shared-mime-info \
    shim-signed \
    snapd \
    squashfs-tools \
    sudo \
    systemd \
    systemd-resolved \
    systemd-sysv \
    systemd-timesyncd \
    tar \
    xauth \
    xclip \
    xdg-user-dirs \
    xxd \
    xz-utils \
    zerofree \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

###############################################################
####          bookworm vs testing differences              ####
###############################################################
FROM common AS common-bookworm
FROM common AS common-testing
RUN apt-get update && apt-get install -y systemd-cryptsetup && apt-get clean && rm -rf /var/lib/apt/lists/*

###############################################################
####                    Common to a Model                  ####
###############################################################
FROM common-${FLAVOR_RELEASE} AS amd64-generic
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    grub2 \
    grub-pc-bin \
    grub-efi-amd64-bin \
    grub-efi-amd64-signed \
    linux-image-amd64 \
    qemu-guest-agent \
    zfsutils-linux \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM common-${FLAVOR_RELEASE} AS arm64-common
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    grub-efi-arm64-bin \
    grub-efi-arm64-signed \
    linux-image-arm64 \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM arm64-common AS arm64-generic
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    qemu-guest-agent \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM arm64-common AS rpicommon
RUN sed -i 's/^Components: main.*$/& non-free-firmware/' /etc/apt/sources.list.d/debian.sources
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    raspi-firmware \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
COPY rpi/config.txt /boot/config.txt

FROM rpicommon AS arm64-rpi3
FROM rpicommon AS arm64-rpi4

###############################################################
####               Post-Process Common to All              ####
###############################################################
FROM ${TARGETARCH}-${MODEL} AS all
RUN systemctl enable systemd-networkd
RUN systemctl enable ssh

# Fixup sudo perms
RUN chown root:root /usr/bin/sudo && chmod 4755 /usr/bin/sudo

FROM --platform="linux/${TARGETARCH}" quay.io/kairos/framework:${FRAMEWORK_VERSION} AS framework

FROM all AS base-kairos

# Symlinks to make elemental installer work
RUN ORIG=/usr/sbin/grub-install; DEST=/usr/sbin/grub2-install; [ -e $ORIG ] && [ ! -e $DEST ] && ln -s $ORIG $DEST || true
RUN ORIG=/usr/bin/grub-editenv; DEST=/usr/sbin/grub2-editenv; [ -e $ORIG ] && [ ! -e $DEST ] && ln -s $ORIG $DEST || true

# here we add 100Mb aprox
COPY --from=framework / /

RUN rm -rf /etc/ssh/ssh_host_*

COPY which-init.sh /usr/local/bin/which-init.sh

RUN if [ -f "/etc/kairos-release" ]; then sed -i -n '/KAIROS_/!p' /etc/kairos-release; fi

# need to be defined after FROM for them to be replaced in the RUN bellow
ARG HOME_URL="https://github.com/kairos-io/kairos"
ARG BUG_REPORT_URL="https://github.com/kairos-io/kairos/issues"
ARG GITHUB_REPO="kairos-io/kairos"
ARG ID=kairos
ARG REGISTRY_AND_ORG="quay.io/kairos"

ARG RELEASE
ARG FLAVOR
ARG FLAVOR_RELEASE
ARG VARIANT
ARG FAMILY
ARG MODEL
ARG TARGETARCH
ARG SOFTWARE_VERSION
ARG SOFTWARE_VERSION_PREFIX
ARG SOFTWARE_LUET_VERSION=""

RUN rm -rf /etc/machine-id

FROM base-kairos AS kairos-core

FROM base-kairos AS kairos-standard
ARG SOFTWARE_VERSION
LABEL io.kairos.k3s_version="${SOFTWARE_VERSION}"
RUN luet install -y system/provider-kairos
RUN luet install -y "k8s/${SOFTWARE_VERSION_PREFIX}-$(which-init.sh)@${SOFTWARE_LUET_VERSION:-$SOFTWARE_VERSION}" utils/edgevpn utils/k9s utils/nerdctl container/kubectl utils/kube-vip

FROM kairos-${VARIANT} AS kairos-final
ARG BASE_IMAGE
ARG FRAMEWORK_VERSION
ARG RELEASE
ARG FLAVOR
ARG FLAVOR_RELEASE
ARG VARIANT
ARG FAMILY
ARG MODEL
ARG TARGETARCH
ARG SOFTWARE_VERSION
ARG SOFTWARE_VERSION_PREFIX

LABEL org.opencontainers.image.authors="Kairos Maintainers <team@kairos.io>"
LABEL org.opencontainers.image.licenses="Apache-2.0"
LABEL org.opencontainers.image.url="https://github.com/kairos-io/kairos"
LABEL org.opencontainers.image.source="https://github.com/kairos-io/kairos.git"
LABEL io.kairos.base_image="${BASE_IMAGE}"
LABEL io.kairos.variant="${VARIANT}"
LABEL io.kairos.family="${FAMILY}"
LABEL io.kairos.flavor="${FLAVOR}"
LABEL io.kairos.flavor_release="${FLAVOR_RELEASE}"
LABEL io.kairos.model="${MODEL}"
LABEL io.kairos.release="${RELEASE}"
LABEL io.kairos.framework-version="${FRAMEWORK_VERSION}"
LABEL io.kairos.software-version="${SOFTWARE_VERSION}"
LABEL io.kairos.software-version-prefix="${SOFTWARE_VERSION_PREFIX}"
LABEL io.kairos.targetarch="${TARGETARCH}"

RUN kairos-agent versioneer os-release-variables > /etc/kairos-release
RUN kairos-agent versioneer container-artifact-name > /IMAGE

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN luet database get-all-installed --output /etc/kairos/versions.yaml

# TODO what about caches?
RUN kernel=$(ls /lib/modules | head -n1) && depmod -a "${kernel}"

# Set empty machine-id
# This prevents systemd from thinking that the machine is on first boot
# and recreating /etc/ dependencies in services and such
# do this before initramfs so its in the initramfs
RUN printf "" > /etc/machine-id || true
# Regenerate initrd if necessary, proper config files with immucore and custom initrd should already be in there installed by framework
# for systemd distros
RUN if [ -f "/usr/bin/dracut" ]; then \
      kernel=$(ls /lib/modules | head -n1) && \
      dracut -f "/boot/initrd-${kernel}" "${kernel}" && \
      ln -sf "initrd-${kernel}" /boot/initrd; \
    fi
# for alpine (openrc based)
RUN if [ -f "/sbin/mkinitfs" ]; then \
      kernel=$(ls /lib/modules | head -n1) && \
      mkinitfs -o /boot/initrd "${kernel}"; \
    fi

# symlink kernel to /boot/vmlinuz
RUN kernel=$(ls /boot/vmlinuz-* 2>/dev/null | head -n1) && if [ -e "$kernel" ]; then ln -sf "$kernel" /boot/vmlinuz; fi || true
RUN kernel=$(ls /boot/Image* 2>/dev/null | head -n1) && if [ -e "$kernel" ]; then ln -sf "$kernel" /boot/vmlinuz; fi || true

# this is generally present on rhel based systems, but it doesn't hurt to remove in any case
RUN rm -rf /boot/initramfs-* || true

RUN rm /var/lib/dbus/machine-id || true
RUN rm /etc/hostname || true

# Disable the make-policy service that its on by default on some systemd versions
# it creates a pcrlock.json policy that conflicts with our mesurements when trying to enroll it
RUN if [ "$(which-init.sh)" = "systemd" ]; then \
      systemctl disable systemd-pcrlock-make-policy || true; \
      systemctl mask systemd-pcrlock-make-policy || true; \
      journalctl --vacuum-size=1K || true; \
    fi

RUN rm -rf /tmp/*
RUN luet cleanup
RUN rm -rf /var/luet
