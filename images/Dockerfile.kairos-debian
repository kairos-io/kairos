###############################################################
####                           ARGS                        ####
###############################################################
ARG FLAVOR
ARG FLAVOR_RELEASE
ARG MODEL=generic
ARG BASE_IMAGE=debian:testing
ARG VARIANT
ARG VERSION
ARG FRAMEWORK_VERSION=master
# Not to be confused with the concept of MODEL, this is either fips or generic
ARG SECURITY_PROFILE=generic
# TARGETARCH is used to determine the architecture of the image
# it is already set by Docker so it doesn't need to be defined here

###############################################################
####                     Upstream Images                   ####
###############################################################

# we use testing for amd64 because zfsutils-linux is not available in bookworm
FROM $BASE_IMAGE AS amd64-upstream
RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates
RUN <<EOF
echo "deb https://ftp.debian.org/debian bookworm main contrib" >> /etc/apt/sources.list.d/kairos.list
EOF

FROM $BASE_IMAGE AS arm64-upstream

###############################################################
####                          Common                       ####
###############################################################
FROM ${TARGETARCH}-upstream AS common

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y --no-install-recommends \
    binutils \
    cloud-guest-utils \
    conntrack \
    console-setup \
    coreutils \
    cryptsetup \
    curl \
    debianutils \
    dmraid \
    dosfstools \
    dracut \
    dracut-live \
    dracut-network \
    e2fsprogs \
    e2fsprogs-l10n \
    efibootmgr \
    ethtool \
    firmware-linux-free \
    fuse3 \
    gawk \
    gdisk \
    gnupg \
    gnupg1-l10n \
    grub2-common \
    haveged \
    iproute2 \
    iptables \
    iputils-ping \
    isc-dhcp-common \
    jq \
    krb5-locales \
    less \
    libatm1 \
    libglib2.0-data \
    libgpm2 \
    libldap-common \
    libnss-systemd \
    libpam-cap \
    libsasl2-modules \
    lvm2 \
    mdadm \
    nano \
    nbd-client \
    ncurses-term \
    neovim \
    nfs-common \
    nftables \
    nohang \
    open-iscsi \
    openssh-server \
    open-vm-tools \
    os-prober \
    parted \
    patch \
    pigz \
    pkg-config \
    polkitd \
    psmisc \
    publicsuffix \
    python3-pynvim \
    rsync \
    shared-mime-info \
    snapd \
    squashfs-tools \
    sudo \
    systemd \
    systemd-resolved \
    systemd-sysv \
    systemd-timesyncd \
    tar \
    xauth \
    xclip \
    xdg-user-dirs \
    xxd \
    xz-utils \
    zerofree \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

###############################################################
####                    Common to a Model                  ####
###############################################################
FROM common AS  generic
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    grub2 \
    grub-pc-bin \
    grub-efi-amd64-bin \
    grub-efi-amd64-signed \
    linux-image-amd64 \
    qemu-guest-agent \
    zfsutils-linux \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM common AS rpicommon
RUN sed -i 's/^Components: main.*$/& non-free-firmware/' /etc/apt/sources.list.d/debian.sources
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    grub-efi-arm64-bin \
    grub-efi-arm64-signed \
    linux-image-arm64 \
    raspi-firmware \
    && apt-get clean && rm -rf /var/lib/apt/lists/*
COPY rpi/config.txt /boot/config.txt

FROM rpicommon AS rpi3
FROM rpicommon AS rpi4

FROM quay.io/kairos/framework:${FRAMEWORK_VERSION}_${SECURITY_PROFILE} AS framework

###############################################################
####               Post-Process Common to All              ####
###############################################################
FROM ${MODEL} AS all
RUN ln -s /usr/sbin/grub-install /usr/sbin/grub2-install
RUN ln -s /usr/bin/grub-editenv /usr/bin/grub2-editenv
RUN systemctl enable systemd-networkd
RUN systemctl enable ssh

# Fixup sudo perms
RUN chown root:root /usr/bin/sudo && chmod 4755 /usr/bin/sudo

# Clear cache
RUN rm -rf /var/cache/* && journalctl --vacuum-size=1K && rm /etc/machine-id && rm /var/lib/dbus/machine-id && rm /etc/hostname

# Originally done in Earthly
COPY --from=framework / /

RUN rm -rf /etc/ssh/ssh_host_*

COPY naming.sh /usr/local/bin/naming.sh

RUN sed -i -n '/KAIROS_/!p' /etc/os-release

# need to be defined after FROM for them to be replaced in the RUN bellow
ARG FLAVOR
ARG FLAVOR_RELEASE
ARG VARIANT
ARG OS_ID=kairos
ARG HOME_URL="https://github.com/kairos-io/kairos"
ARG BUG_REPORT_URL="https://github.com/kairos-io/kairos/issues"
ARG GITHUB_REPO="kairos-io/kairos"
# TODO: merge these
ARG VERSION
ARG FAMILY
ARG MODEL
ARG REGISTRY_AND_ORG="quay.io/kairos"
ARG K3S_VERSION
ARG TARGETARCH
ARG OS_NAME=kairos-${VARIANT}-${FLAVOR}-${FLAVOR_RELEASE}
ENV KAIROS_VERSION="${VERSION}${K3S_VERSION:+-k3s$K3S_VERSION}"
ENV OS_VERSION=${KAIROS_VERSION}
ENV OS_LABEL=${KAIROS_VERSION}
RUN OS_LABEL=$(naming.sh container_artifact_label) \
    OS_REPO=$(naming.sh container_artifact_repo) \
    ARTIFACT=$(naming.sh bootable_artifact_name) \
    envsubst >>/etc/os-release </usr/lib/os-release.tmpl
RUN naming.sh container_artifact_name > /IMAGE

# TODO no benefit of keaping it?
# RUN rm /usr/local/bin/naming.sh

RUN rm -rf /etc/machine-id

# TODO dev kairos-agent
# TODO dev immucore
# TODO dev kcrypt
# TODO latest k3s

FROM all AS core

FROM all AS standard
ARG K3S_VERSION
RUN luet install -y system/provider-kairos
RUN luet install -y k8s/k3s-systemd@${K3S_VERSION} utils/edgevpn utils/k9s utils/nerdctl container/kubectl utils/kube-vip

FROM ${VARIANT} AS final
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN luet database get-all-installed --output /etc/kairos/versions.yaml

# TODO what about NOT building initrd for the UKI?
RUN rm -rf /boot/initrd.img-*
# TODO what about caches?
RUN kernel=$(ls /lib/modules | head -n1) && depmod -a "${kernel}"

RUN if [ -f "/usr/bin/dracut" ]; then \
      kernel=$(ls /lib/modules | head -n1) && \
      dracut -f "/boot/initrd-${kernel}" "${kernel}" && \
      ln -sf "initrd-${kernel}" /boot/initrd; \
    fi
# Proper config files with immucore and custom initrd should already be in there installed by framework
RUN if [ -f "/sbin/mkinitfs" ]; then \
      kernel=$(ls /lib/modules | head -n1) && \
      mkinitfs -o /boot/initrd "${kernel}"; \
    fi

RUN if [ -e "/boot/Image" ] && \
      [ ! -L "/boot/Image" ]; then \
      kernel=$(ls /boot/vmlinuz-* | head -n1) && \
      if [ -e "$kernel" ]; then \
        ln -sf "${kernel#/boot/}" /boot/vmlinuz; \
      fi; \
      kernel=$(ls /boot/Image-* | head -n1) && \
      if [ -e "$kernel" ]; then \
        ln -sf "${kernel#/boot/}" /boot/vmlinuz; \
      fi \
    fi

RUN rm -rf /tmp/*
RUN luet cleanup
RUN rm -rf /var/luet
# Do not build this image directly, it is supposed to be appended to any of the
# distribution images in this directory.
FROM quay.io/kairos/framework:${FRAMEWORK_VERSION}_${SECURITY_PROFILE} AS framework

FROM all AS base-kairos

# Symlinks to make elemental installer work
RUN ln -sf /usr/sbin/grub-install /usr/sbin/grub2-install
RUN ln -sf /usr/bin/grub-editenv /usr/bin/grub2-editenv

# Originally done in Earthly
COPY --from=framework / /

RUN rm -rf /etc/ssh/ssh_host_*

COPY naming.sh /usr/local/bin/naming.sh

RUN sed -i -n '/KAIROS_/!p' /etc/os-release

# need to be defined after FROM for them to be replaced in the RUN bellow
ARG FLAVOR
ARG FLAVOR_RELEASE
ARG VARIANT
ARG OS_ID=kairos
ARG HOME_URL="https://github.com/kairos-io/kairos"
ARG BUG_REPORT_URL="https://github.com/kairos-io/kairos/issues"
ARG GITHUB_REPO="kairos-io/kairos"
# TODO: merge these
ARG VERSION
ARG FAMILY
ARG MODEL
ARG REGISTRY_AND_ORG="quay.io/kairos"
ARG K3S_VERSION
ARG TARGETARCH
ARG OS_NAME=kairos-${VARIANT}-${FLAVOR}-${FLAVOR_RELEASE}
ENV KAIROS_VERSION="${VERSION}${K3S_VERSION:+-k3s$K3S_VERSION}"
ENV OS_VERSION=${KAIROS_VERSION}
ENV OS_LABEL=${KAIROS_VERSION}
RUN OS_LABEL=$(naming.sh container_artifact_label) \
    OS_REPO=$(naming.sh container_artifact_repo) \
    ARTIFACT=$(naming.sh bootable_artifact_name) \
    envsubst >>/etc/os-release </usr/lib/os-release.tmpl
RUN naming.sh container_artifact_name > /IMAGE

# TODO no benefit of keaping it?
# RUN rm /usr/local/bin/naming.sh

RUN rm -rf /etc/machine-id

# TODO dev kairos-agent?
# TODO dev immucore?
# TODO dev kcrypt?
# TODO latest k3s?

FROM base-kairos AS kairos-core

FROM base-kairos AS kairos-standard
ARG K3S_VERSION
RUN luet install -y system/provider-kairos
RUN luet install -y k8s/k3s-systemd@${K3S_VERSION} utils/edgevpn utils/k9s utils/nerdctl container/kubectl utils/kube-vip

FROM kairos-${VARIANT} AS kairos-final
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN luet database get-all-installed --output /etc/kairos/versions.yaml

# TODO what about NOT building initrd for the UKI?
# TODO what about caches?
RUN kernel=$(ls /lib/modules | head -n1) && depmod -a "${kernel}"
# TODO in which case would dracut and mkinitfs not be installed?
# Regenerate initrd if necessary
RUN if [ -f "/usr/bin/dracut" ]; then \
      kernel=$(ls /lib/modules | head -n1) && \
      dracut -f "/boot/initrd-${kernel}" "${kernel}" && \
      ln -sf "initrd-${kernel}" /boot/initrd; \
    fi
# Proper config files with immucore and custom initrd should already be in there installed by framework
RUN if [ -f "/sbin/mkinitfs" ]; then \
      kernel=$(ls /lib/modules | head -n1) && \
      mkinitfs -o /boot/initrd "${kernel}"; \
    fi

# this is generally present on rhel based systems, but it doesn't hurt to remove in any case
RUN rm -rf /boot/initramfs-* || true

RUN rm -rf /tmp/*
RUN luet cleanup
RUN rm -rf /var/luet