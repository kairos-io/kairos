name: Reusable workflow - docker arm build

on:
  workflow_call:
    inputs:
      worker:
        required: true
        type: string
      flavor:
        required: true
        type: string
      model:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.worker }}
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    steps:
      - name: Release space from worker
        if: ${{ inputs.worker != 'fast' }}
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Login to Quay Registry
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Install earthly
        uses: Luet-lab/luet-install-action@v1.1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - name: Set compression for PR
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "IMG_COMPRESSION=zstd" >> $GITHUB_ENV
      - name: Set compression for master
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          echo "IMG_COMPRESSION=xz" >> $GITHUB_ENV
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - name: Shared runner build  ðŸ”§
        if: ${{ inputs.worker != 'fast' }}
        run: |
          ./earthly.sh +all-arm --VARIANT=core --MODEL=${{ inputs.model }} \
            --FLAVOR=${{ inputs.flavor }} \
            --IMG_COMPRESSION=${{env.IMG_COMPRESSION}}
      - name: fast runner Build  ðŸ”§
        if: ${{ inputs.worker == 'fast' }}
        run: |
          earthly --allow-privileged +all-arm \
              --VARIANT=core --MODEL=${{ inputs.model }} \
              --FLAVOR=${{ inputs.flavor }} --IMG_COMPRESSION=${{env.IMG_COMPRESSION}}
      - name: Show img sizes
        run: |
          ls -ltra build
          ls -ltrh build
      - name: Push  ðŸ”§
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        env:
          FLAVOR: ${{ inputs.flavor }}
          IMAGE: quay.io/kairos/core-$FLAVOR:latest
          MODEL: ${{ inputs.model }}
        run: |
          export _IMG=$(cat build/IMAGE)
          export _NEW_IMG=$(echo $_IMG | cut -f1 -d:):latest
          docker tag $_IMG $_NEW_IMG
          docker push $_NEW_IMG
      - name: Prepare sarif files  ðŸ”§
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          mkdir sarif
          sudo mv build/*.sarif sarif/
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        with:
          sarif_file: 'sarif'
          category: ${{ inputs.flavor }}
      - name: Sign image
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        env:
          IMAGE: "quay.io/kairos/core-${{ inputs.flavor }}"
          TAG: "latest"
          COSIGN_YES: true
        run: |
          # Avoid pushing a new image for every commit (re-use latest)
          export _IMG=$(cat build/IMAGE)
          export _LATEST=$(echo $_IMG | cut -f1 -d:):latest
          docker push $_LATEST
          image_ref=$(docker image inspect --format='{{index .RepoDigests 0}}' "$_LATEST")
          spdx=$(ls build/*.spdx.json)
          cosign attach sbom --sbom $spdx $image_ref
          cosign sign $image_ref --attachment sbom
          # in-toto attestation
          cosign attest --type spdx --predicate $spdx $image_ref
      - name: Upload results
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.flavor }}-image
          path: build
          if-no-files-found: error
