name: Reusable workflow - docker arm build - testPR
on:
  workflow_call:
    inputs:
      worker:
        required: true
        type: string
      flavor:
        required: true
        type: string
      flavor_release:
        required: true
        type: string
      family:
        required: true
        type: string
      model:
        required: true
        type: string
      base_image:
        required: true
        type: string
      variant:
        required: true
        type: string
      k3s_version:
        required: false
        type: string

permissions: read-all
jobs:
  build:
    runs-on: ${{ inputs.worker }}
    name: ${{ inputs.flavor }}-${{ inputs.flavor_release }}
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    env:
      # Set the registry based on the event type. For PR, we set ttl.sh
      REGISTRY: "ttl.sh"
    steps:
      - name: Set REGISTRY for master/release
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        run: echo "REGISTRY=quay.io/kairos" >> $GITHUB_ENV
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Install kairos-agent (for versioneer)
        uses: Luet-lab/luet-install-action@cec77490c3f2416d7d07a47cfab04d448641d7ce # v1.1
        with:
          repository: quay.io/kairos/packages-arm64
          packages: system/kairos-agent
      - name: Set Version
        run: |
          GIT_VERSION=$(git describe --always --tags --dirty)
          RELEASE=$([ "$GITHUB_REF" == "refs/heads/master" ] && echo "master" || echo "$GIT_VERSION")
          echo "GIT_VERSION=$GIT_VERSION" >> $GITHUB_ENV
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV

      - name: Set Image name
        run: |
          SOFTWARE_VERSION="${{ inputs.k3s_version }}"
          if [ -n "$SOFTWARE_VERSION" ]; then
            SOFTWARE_VERSION="v$SOFTWARE_VERSION"
          fi

          IMAGE_REF=$(SOFTWARE_VERSION=${SOFTWARE_VERSION} SOFTWARE_VERSION_PREFIX=k3s FLAVOR=${{ inputs.flavor }} FLAVOR_RELEASE="${{ inputs.flavor_release }}" MODEL=${{ inputs.model }} TARGETARCH=arm64 VARIANT=${{ inputs.variant }} REGISTRY_AND_ORG="${{ env.REGISTRY }}" RELEASE=${{ env.RELEASE }} kairos-agent versioneer container-artifact-name)
          echo "IMAGE_REF=${IMAGE_REF}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        if: ${{ inputs.worker != 'ARM64' }}
        uses: docker/setup-buildx-action@v3
      - name: Set up Docker Buildx with mirror
        if: ${{ inputs.worker == 'ARM64' }}
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["registry.docker-mirror.svc.cluster.local:5000"]
            [registry."registry.docker-mirror.svc.cluster.local:5000"]
              insecure = true
              http = true
      - name: Login to Quay Registry
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Build the docker image
        uses: docker/build-push-action@v6
        with:
          context: images/
          file: images/Dockerfile
          platforms: linux/arm64
          load: true
          tags: ${{ env.IMAGE_REF }}, kairos:${{ env.GIT_VERSION }}
          build-args: |
            VARIANT=${{ inputs.variant }}
            MODEL=${{ inputs.model }}
            BASE_IMAGE=${{ inputs.base_image }}
            SOFTWARE_VERSION: ${{ inputs.k3s_version && 'v' || '' }}${{ inputs.k3s_version }}
            SOFTWARE_VERSION_PREFIX=k3s
            # renovate: datasource=docker depName=quay.io/kairos/framework versioning=semver
            FRAMEWORK_VERSION=v2.15.12
      - name: Grype table
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: anchore/scan-action@v6.0.0
        with:
          image: kairos:${{ env.GIT_VERSION }}
          output-format: table
          severity-cutoff: critical
          add-cpes-if-none: true
          only-fixed: true
      - name: Grype sarif
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: anchore/scan-action@v6.0.0
        with:
          image: kairos:${{ env.GIT_VERSION }}
          output-format: sarif
          output-file: grype.sarif
          severity-cutoff: critical
          add-cpes-if-none: true
          only-fixed: true
      - name: Trivy
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: aquasecurity/trivy-action@0.29.0
        with:
          image-ref: kairos:${{ env.GIT_VERSION }}
          format: sarif
          output: trivy.sarif
          severity: CRITICAL
          limit-severities-for-sarif: true
      - name: Push the docker image
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: docker/build-push-action@v6
        with:
          context: images/
          file: images/Dockerfile.kairos-${{ inputs.family }}
          platforms: linux/arm64
          push: "true"
          tags: ${{ env.IMAGE_REF }}
          build-args: |
            VARIANT=${{ inputs.variant }}
            MODEL=${{ inputs.model }}
            BASE_IMAGE=${{ inputs.base_image }}
            RELEASE=${{ env.RELEASE }}
            SOFTWARE_VERSION: ${{ inputs.k3s_version && 'v' || '' }}${{ inputs.k3s_version }}
            SOFTWARE_VERSION_PREFIX=k3s
            # renovate: datasource=docker depName=quay.io/kairos/framework versioning=semver
            FRAMEWORK_VERSION=v2.15.12
      - name: Sign image
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        env:
          COSIGN_YES: true
        run: |
          docker push "${{ env.IMAGE_REF }}" # Otherwise .RepoDigests will be empty for some reason
          cosign sign $(docker image inspect --format='{{index .RepoDigests 0}}' "${{ env.IMAGE_REF }}")
      - name: Build raw image
        if: ${{ inputs.model != 'rpi3' }}
        run: |
          docker run --rm --privileged -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/build/:/output quay.io/kairos/auroraboot:latest \
          --debug \
          --set "disable_http_server=true" \
          --set "disable_netboot=true" \
          --set "container_image=${{ env.IMAGE_REF }}" \
          --set "state_dir=/output" \
          --set "disk.raw=true"
      - name: Upload Image as OCI artifact on release
        if: ${{ startsWith(github.ref, 'refs/tags/v') &&  inputs.model != 'rpi3' }}
        run: |
          curl https://luet.io/install.sh | sudo sh
          IMAGE=$(echo "${{ env.IMAGE_REF }}" | sed 's/$/-img/')
          sudo tar cvf build.tar build
          sudo luet util pack $IMAGE build.tar image.tar
          sudo -E docker load -i image.tar
          sudo -E docker push "$IMAGE"
          sudo rm -rf build/IMAGE
      - uses: itxaka/sarif-filter@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          input: trivy.sarif
          output: trivy.sarif
          severity: critical
      - uses: itxaka/sarif-filter@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          input: grype.sarif
          output: grype.sarif
          severity: critical
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          sarif_file: 'trivy.sarif'
          category: ${{ inputs.flavor }}-${{ inputs.flavor_release }}-${{ inputs.variant }}-arm64-${{ inputs.model }}
      - name: Upload Grype scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: startsWith(github.ref, 'refs/tags/')
        with:
          sarif_file: 'grype.sarif'
          category: ${{ inputs.flavor }}-${{ inputs.flavor_release }}-${{ inputs.variant }}-arm64-${{ inputs.model }}
      - uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: ${{ inputs.flavor }}-${{ inputs.flavor_release }}-${{ inputs.variant }}-arm64-${{ inputs.model }}-${{ inputs.k3s_version }}-scan-results
          path: |
            trivy.sarif
            grype.sarif
          if-no-files-found: error
