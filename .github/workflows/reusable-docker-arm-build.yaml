name: Reusable workflow - docker arm build

# TODO: Merge this workflow with the reusable-build-flavor one
# The same workflow should be able to build any combination of flavor,
# model, architecture, etc.

on:
  workflow_call:
    inputs:
      worker:
        required: true
        type: string
      flavor:
        required: true
        type: string
      flavor_release:
        required: true
        type: string
      family:
        required: true
        type: string
      model:
        required: true
        type: string
      base_image:
        required: true
        type: string

permissions: read-all
jobs:
  build:
    runs-on: ${{ inputs.worker }}
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    steps:
      - name: Release space from worker
        if: ${{ inputs.worker != 'fast' }}
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm || true
          sudo apt-get remove -y powershell || true
          sudo apt-get remove -y firefox || true
          sudo apt-get remove -y monodoc-manual || true
          sudo apt-get remove -y msbuild || true
          sudo apt-get remove -y microsoft-edge-stable || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get remove -y '^gcc-*' || true
          sudo apt-get remove -y '^g++-*' || true
          sudo apt-get remove -y '^cpp-*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Install earthly
        uses: Luet-lab/luet-install-action@cec77490c3f2416d7d07a47cfab04d448641d7ce # v1.1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to Quay Registry
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')) }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Set local mirror
        if: ${{ inputs.worker == 'ARM64' }}
        run: |
          # Configure earthly to use the docker mirror in CI
          # https://docs.earthly.dev/ci-integration/pull-through-cache#configuring-earthly-to-use-the-cache
          mkdir -p ~/.earthly/
          cat << EOF > ~/.earthly/config.yml
          global:
            buildkit_additional_config: |
              [registry."docker.io"]
                mirrors = ["registry.docker-mirror.svc.cluster.local:5000"]
              [registry."registry.docker-mirror.svc.cluster.local:5000"]
                insecure = true
                http = true
          EOF
      - name: Set compression for PR
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          echo "IMG_COMPRESSION=zstd" >> $GITHUB_ENV
      - name: Set compression for master
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          echo "IMG_COMPRESSION=xz" >> $GITHUB_ENV
      - name: Login to earthly
        run: |
          earthly account login --token ${{ secrets.EARTHLY_TOKEN }} && earthly org select Kairos
      - name: Restore trivy cache
        uses: yogeshlonkar/trivy-cache-action@v0
        with:
          gh-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Populate trivy Cache
        run: |
          [ ! -d ".trivy" ] && mkdir -p ".trivy"
          earthly +trivy-download-db --DIR .trivy
      - name: Build  ðŸ”§
        run: |
          earthly -P +all-arm \
              --TRIVY_CACHE_DIR=.trivy \
              --VARIANT=core \
              --MODEL=${{ inputs.model }} \
              --FLAVOR=${{ inputs.flavor }} \
              --FLAVOR_RELEASE=${{ inputs.flavor_release }} \
              --FAMILY=${{ inputs.family }} \
              --BASE_IMAGE=${{ inputs.base_image }} \
              --IMG_COMPRESSION=${{env.IMG_COMPRESSION}}
      - name: Show img sizes
        run: |
          ls -ltra build
          ls -ltrh build
      - name: Convert all json files into a reports.tar.gz file
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd build
          filename=$(ls *-grype.json | head -n 1) && filename=${filename%%-grype.json}
          sudo tar cvf "${filename}-sbom-scan-reports.tar.gz" *.json
      - name: Install kairos-agent (for versioneer)
        uses: Luet-lab/luet-install-action@cec77490c3f2416d7d07a47cfab04d448641d7ce # v1.1
        with:
          repository: quay.io/kairos/packages
          packages: system/kairos-agent
      - name: Set Image name (master)
        if: ${{ github.ref == 'refs/heads/master' }}
        run: |
          IMAGE_REF=$(FLAVOR=${{ inputs.flavor }} FLAVOR_RELEASE="${{ inputs.flavor_release }}" MODEL=${{ inputs.model }} TARGETARCH=arm64 VARIANT=core REGISTRY_AND_ORG="quay.io/kairos" RELEASE=master kairos-agent versioneer container-artifact-name)
          echo "IMAGE_REF=${IMAGE_REF}" >> $GITHUB_ENV
      - name: Set Image name (release)
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo "IMAGE_REF=$(cat build/IMAGE)" >> $GITHUB_ENV
      - name: Push  ðŸ”§
        if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' }}
        run: |
          docker tag $(cat build/IMAGE) ${{ env.IMAGE_REF }}
          docker push ${{ env.IMAGE_REF }}
      - name: Sign image
        if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' }}
        env:
          COSIGN_YES: true
        run: |
          docker push "${{ env.IMAGE_REF }}" # Otherwise .RepoDigests will be empty for some reason
          cosign sign $(docker image inspect --format='{{index .RepoDigests 0}}' "${{ env.IMAGE_REF }}")
      - name: Upload Image
        if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master' }}
        run: |
          curl https://luet.io/install.sh | sudo sh
          IMAGE=$(echo "${{ env.IMAGE_REF }}" | sed 's/$/-img/')
          sudo tar cvf build.tar build
          sudo luet util pack $IMAGE build.tar image.tar
          sudo -E docker load -i image.tar
          sudo -E docker push "$IMAGE"
          sudo rm -rf build/IMAGE
      - name: Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
        with:
          files: |
            build/*scan-reports.tar.gz
      - name: Prepare sarif files  ðŸ”§
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir trivy-sarif grype-sarif
          sudo mv build/*trivy.sarif trivy-sarif/
          sudo mv build/*grype.sarif grype-sarif/
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@afb54ba388a7dca6ecae48f608c4ff05ff4cc77a # v3
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          sarif_file: 'trivy-sarif'
          category: ${{ matrix.flavor }}-trivy
      - name: Upload Grype scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@afb54ba388a7dca6ecae48f608c4ff05ff4cc77a # v3
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          sarif_file: 'grype-sarif'
          category: ${{ matrix.flavor }}-grype
      - name: Upload results
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && inputs.model != 'nvidia-jetson-agx-orin' }}
        uses: actions/upload-artifact@89ef406dd8d7e03cfd12d9e0a4a378f454709029 # v4
        with:
          name: ${{ inputs.flavor }}-${{ inputs.flavor_release }}-arm-${{ inputs.model }}
          path: build
          if-no-files-found: error
