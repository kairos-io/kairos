name: Build and test images
on:
  push:
    branches:
      - master
    paths:
      - '**'

concurrency:
  group: ci-image-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
env:
  FORCE_COLOR: 1
jobs:
  get-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
          sudo apt update && sudo apt install -y jq
      - id: set-matrix
        run: |
          content=`cat .github/flavors.json  | jq 'map(select(.frameworkonly != "true"))'`
          # the following lines are only required for multi line json
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          # end of optional handling for multi line json
          echo "::set-output name=matrix::{\"include\": $content }"

  get-framework-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
    - uses: actions/checkout@v3
    - run: |
        git fetch --prune --unshallow
    - id: set-matrix
      run: |
          content=`cat .github/flavors.json`
          # the following lines are only required for multi line json
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          # end of optional handling for multi line json
          echo "::set-output name=matrix::{\"include\": $content }"

  build:
    uses: kairos-io/kairos/.github/workflows/reusable-build-flavor.yaml@1556-pr-one-flavor
    needs:
      - get-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get-matrix.outputs.matrix)}}
    steps:
      - name: Release space from worker
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Login to Quay Registry
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Install earthly
        uses: Luet-lab/luet-install-action@v1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - name: Build PR ðŸ”§
        if: ${{ github.event_name == 'pull_request' }}
        env:
          FLAVOR: ${{ matrix.flavor }}
          IMAGE: quay.io/kairos/core-${{ matrix.flavor }}:latest
        run: |
          earthly +ci --SECURITY_SCANS=false --IMAGE=$IMAGE --FLAVOR=$FLAVOR
          sudo mv build/* .
          sudo rm -rf build
      - name: Build master ðŸ”§
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        env:
          FLAVOR: ${{ matrix.flavor }}
          IMAGE: quay.io/kairos/core-${{ matrix.flavor }}:latest
        run: |
          earthly +ci --IMAGE=$IMAGE --FLAVOR=$FLAVOR
          sudo mv build/* .
          sudo rm -rf build
          mkdir sarif
          mv *.sarif sarif/
      - name: Upload Trivy scan results to GitHub Security tab
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'sarif'
          category: ${{ matrix.flavor }}
      - uses: actions/upload-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        with:
          name: kairos-${{ matrix.flavor }}.sbom.zip
          path: |
            *.syft.json
            *.spdx.json
          if-no-files-found: error
      - name: Push to quay
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        env:
          IMAGE: "quay.io/kairos/core-${{ matrix.flavor }}"
          TAG: "latest"
          COSIGN_YES: true
        run: |
          docker push "$IMAGE:$TAG"
          image_ref=$(docker image inspect --format='{{index .RepoDigests 0}}' "$IMAGE:$TAG")
          spdx=$(ls *.spdx.json)
          cosign attach sbom --sbom $spdx $image_ref
          cosign sign $image_ref --attachment sbom
          # in-toto attestation
          cosign attest --type spdx --predicate $spdx $image_ref
      - name: Push to testing
        run: |
          docker tag quay.io/kairos/core-${{ matrix.flavor }}:latest ttl.sh/kairos-${{ matrix.flavor }}-${{ github.sha }}:24h
          docker push ttl.sh/kairos-${{ matrix.flavor }}-${{ github.sha }}:24h
  build-framework:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    uses: kairos-io/kairos/.github/workflows/reusable-build-framework-flavor.yaml@1556-pr-one-flavor
    needs:
      - get-matrix
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.get-framework-matrix.outputs.matrix)}}
    with:
      flavor: ${{ matrix.flavor }}

  install-test:
    uses: kairos-io/kairos/.github/workflows/reusable-build-flavor.yaml@1556-pr-one-flavor
    needs:
      - build
    strategy:
      fail-fast: true
      matrix:
        include:
          - flavor: opensuse-leap
    with:
      flavor: ${{ matrix.flavor }}

  zfs-test:
    uses: kairos-io/kairos/.github/workflows/reusable-zfs-test.yaml@1556-pr-one-flavor
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: "ubuntu"
    with:
      flavor: ${{ matrix.flavor }}

  # This job is used to download the latest release and then used by the upgrade-latest-* jobs
  latest-release:
    runs-on: ubuntu-latest
    steps:
      - uses: robinraju/release-downloader@v1.8
        with:
          # A flag to set the download target as latest release
          # The default value is 'false'
          latest: true
          repository: kairos-io/kairos
          fileName: '*opensuse-leap-v*.iso'
          out-file-path: last-release
      - uses: actions/upload-artifact@v3
        with:
          name: latest-release.zip
          path: last-release
          if-no-files-found: error
  qemu-acceptance-tests:
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: "alpine-opensuse-leap"
          - flavor: "opensuse-leap"
          - flavor: "opensuse-tumbleweed"
          - flavor: "ubuntu"
          - flavor: "debian"
          - flavor: "ubuntu-20-lts"
          - flavor: "ubuntu-22-lts"
    steps:
    - name: Release space from worker
      run: |
        echo "Listing top largest packages"
        pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
        head -n 30 <<< "${pkgs}"
        echo
        df -h
        echo
        sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
        sudo apt-get remove --auto-remove android-sdk-platform-tools || true
        sudo apt-get purge --auto-remove android-sdk-platform-tools || true
        sudo rm -rf /usr/local/lib/android
        sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
        sudo rm -rf /usr/share/dotnet
        sudo apt-get remove -y '^mono-.*' || true
        sudo apt-get remove -y '^ghc-.*' || true
        sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
        sudo apt-get remove -y 'php.*' || true
        sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
        sudo apt-get remove -y '^google-.*' || true
        sudo apt-get remove -y azure-cli || true
        sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
        sudo apt-get remove -y '^gfortran-.*' || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        echo
        echo "Listing top largest packages"
        pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
        head -n 30 <<< "${pkgs}"
        echo
        sudo rm -rfv build || true
        df -h
    - uses: actions/checkout@v3
    - run: |
        git fetch --prune --unshallow
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: kairos-${{ matrix.flavor }}.iso.zip
    - name: Install earthly
      uses: Luet-lab/luet-install-action@v1
      with:
        repository: quay.io/kairos/packages
        packages: utils/earthly
    - run: |
            earthly +datasource-iso --CLOUD_CONFIG=tests/assets/autoinstall.yaml
            earthly +run-qemu-datasource-tests --PREBUILT_ISO=$(ls *.iso) --FLAVOR=${{ matrix.flavor }} --SSH_PORT=${{ matrix.port }}
  qemu-bundles-tests:
    uses: kairos-io/kairos/.github/workflows/reusable-qemu-bundles-test.yaml@1556-pr-one-flavor
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: opensuse-tumbleweed # Kubo test needs systemd version 252+ which atm is not available in Leap
    with:
      flavor: ${{ matrix.flavor }}

  qemu-reset-tests:
    needs:
      - build
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: alpine-opensuse-leap
          - flavor: opensuse-leap
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.iso.zip
      - name: Install earthly
        uses: Luet-lab/luet-install-action@v1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - env:
          KVM: true
        run: |
            # Configure earthly to use the docker mirror in CI
            # https://docs.earthly.dev/ci-integration/pull-through-cache#configuring-earthly-to-use-the-cache
            mkdir -p ~/.earthly/
            cat << EOF > ~/.earthly/config.yml
            global:
              buildkit_additional_config: |
                [registry."docker.io"]
                  mirrors = ["registry.docker-mirror.svc.cluster.local:5000"]
                [registry."registry.docker-mirror.svc.cluster.local:5000"]
                  insecure = true
                  http = true
            EOF
            earthly -P +datasource-iso --CLOUD_CONFIG=tests/assets/autoinstall.yaml
            earthly -P +run-qemu-datasource-tests --PREBUILT_ISO=$(ls *.iso) --TEST_SUITE=reset-test --FLAVOR=${{ matrix.flavor }}

  qemu-netboot-tests:
    needs:
      - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: alpine-opensuse-leap
          - flavor: opensuse-leap
          - flavor: ubuntu
    steps:
      - name: Release space from worker
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Install earthly
        uses: Luet-lab/luet-install-action@v1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - run: |
          earthly -P +run-qemu-netboot-test --TEST_SUITE=netboot-test --FLAVOR=${{ matrix.flavor }}
  upgrade-with-cli-test:
    needs:
      - build
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: alpine-opensuse-leap
          - flavor: opensuse-leap
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.iso.zip
      - name: Release space from worker
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - name: Install earthly
        uses: Luet-lab/luet-install-action@v1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - run: |
          earthly +run-qemu-test --PREBUILT_ISO=$(ls *.iso) \
            --FLAVOR=${{ matrix.flavor }} \
            --CONTAINER_IMAGE=ttl.sh/kairos-${{ matrix.flavor }}-${{ github.sha }}:24h \
            --TEST_SUITE=upgrade-with-cli
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.flavor }}-upgrade-test.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
  upgrade-latest-with-cli-test:
    needs:
    # Not really needs this, but it's a temporary "hack" to run them in sequence
    # TODO: Use built artifacts and don't rebuild them in the run-qemu-netboot-tests target
    - build
    - latest-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - flavor: alpine-opensuse-leap
          - flavor: opensuse-leap
          # - flavor: "ubuntu"
          # - flavor: "ubuntu"
          # - flavor: "ubuntu"
    steps:
      - name: Release space from worker
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: latest-release.zip
      - name: Install earthly
        uses: Luet-lab/luet-install-action@v1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - run: |
          earthly +run-qemu-test --PREBUILT_ISO=$(ls kairos-${{matrix.flavor}}-*.iso) \
            --FLAVOR=${{ matrix.flavor }} \
            --CONTAINER_IMAGE=ttl.sh/kairos-${{ matrix.flavor }}-${{ github.sha }}:24h \
            --TEST_SUITE=upgrade-latest-with-cli
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.flavor }}-upgrade-test.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
  encryption-tests:
    runs-on: ubuntu-latest
    needs:
      - build
    strategy:
      fail-fast: true
      matrix:
        label:
          - "local-encryption"
          - "remote-auto"
          - "remote-static"
          - "remote-https-pinned"
          - "remote-https-bad-cert"
        flavor:
          - "opensuse-leap"
    steps:
      - name: Release space from worker
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version-file: tests/go.mod
          cache-dependency-path: tests/go.sum
      - name: Deps
        run: |
          sudo apt update && \
          sudo apt install -y git qemu-system-x86 qemu-utils swtpm jq make glibc-tools \
          openssl curl gettext ca-certificates curl gnupg lsb-release

          curl -L  https://github.com/mudler/luet/releases/download/0.33.0/luet-0.33.0-linux-amd64 -o luet
          chmod +x luet
          sudo mv luet /usr/bin/luet
          sudo mkdir -p /etc/luet/repos.conf.d/
          sudo luet repo add -y kairos --url quay.io/kairos/packages --type docker
          LUET_NOLOCK=true sudo -E luet install -y container/kubectl utils/k3d utils/earthly
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.iso.zip
      - name: Run tests
        env:
          LABEL: ${{ matrix.label }}
          EMULATE_TPM: true
          USE_QEMU: true
        run: |
          export ISO=$PWD/$(ls *.iso)
          .github/encryption-tests.sh
