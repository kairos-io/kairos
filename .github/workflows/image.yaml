name: Build image

on: 
 push:
   branches:
     - master
 pull_request:

concurrency:
  group: ci-image-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # OIDC support
    strategy:
      fail-fast: false
      matrix:
       include:
         - flavor: "opensuse-leap"
         - flavor: "opensuse-tumbleweed"
         - flavor: "ubuntu"
         - flavor: "ubuntu-20-lts"
         - flavor: "ubuntu-22-lts"
         - flavor: "alpine-ubuntu"
         - flavor: "alpine-opensuse-leap"
         - flavor: "fedora"
         - flavor: "debian"
         - flavor: "rockylinux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          git fetch --prune --unshallow
      - name: setup-docker
        uses: docker-practice/actions-setup-docker@master
      - name: Release space from worker
        run: |
          sudo rm -rf /usr/local/lib/android # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Login to Quay Registry
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Build  ðŸ”§
        env:
          FLAVOR: ${{ matrix.flavor }}
          IMAGE: quay.io/kairos/core-${{ matrix.flavor }}:latest
        run: |
          ./earthly.sh +all --IMAGE=$IMAGE --FLAVOR=$FLAVOR
          sudo mv build/* .
          sudo rm -rf build
      - uses: actions/upload-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.iso.zip
          path: |
            *.iso
            *.sha256
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.initrd.zip
          path: |
            *-initrd
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.squashfs.zip
          path: |
            *.squashfs
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.kernel.zip
          path: |
            *-kernel
            *-initrd
          if-no-files-found: error
      - uses: actions/upload-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.ipxe.zip
          path: |
            *.ipxe
          if-no-files-found: error
      - name: Push to quay
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        env:
          COSIGN_EXPERIMENTAL: 1
        run: | 
          docker push quay.io/kairos/core-${{ matrix.flavor }}:latest
          cosign sign quay.io/kairos/core-${{ matrix.flavor }}:latest
      - name: Push to testing
        run: | 
          docker tag quay.io/kairos/core-${{ matrix.flavor }}:latest ttl.sh/kairos-${{ matrix.flavor }}-${{ github.sha }}:8h
          docker push ttl.sh/kairos-${{ matrix.flavor }}-${{ github.sha }}:8h
  
  install-test:
    needs: 
    - build
    runs-on: macos-12
    strategy:
      fail-fast: true
      matrix:
       include:
         - flavor: "opensuse-leap"
    steps:
      - uses: actions/checkout@v3
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: kairos-${{ matrix.flavor }}.iso.zip
      - name: Install deps
        run: |
          brew install cdrtools jq
      - name: Install Go
        uses: actions/setup-go@v3
        with:
            go-version: '^1.16'
      - run: |
              ls -liah
              export ISO=$PWD/$(ls *.iso)
              export GOPATH="/Users/runner/go"
              export PATH=$PATH:$GOPATH/bin
              export CLOUD_INIT=$PWD/config.yaml 
              export CREATE_VM=true 
              export FLAVOR=${{ matrix.flavor }}
              ./.github/run_test.sh "install-test"
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ${{ matrix.flavor }}-vbox.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn

  # This job is used to download the latest release and then used by the upgrade-latest-* jobs
  latest-release:
    runs-on: ubuntu-latest
    steps:
    - uses: robinraju/release-downloader@v1.7
      with:     
      # A flag to set the download target as latest release
      # The default value is 'false'
        latest: true
        repository: "kairos-io/kairos"
        fileName: "*opensuse-leap*.iso"
        out-file-path: "last-release"
    - uses: actions/upload-artifact@v3
      with:
          name: latest-release.zip
          path: last-release
          if-no-files-found: error

  qemu-acceptance-tests:
    needs: 
    - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
       include:
         - flavor: "alpine-opensuse-leap"
         - flavor: "opensuse-leap"
         - flavor: "opensuse-tumbleweed"
         - flavor: "ubuntu"
         - flavor: "debian"
         - flavor: "ubuntu-20-lts"
         - flavor: "ubuntu-22-lts"
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
          name: kairos-${{ matrix.flavor }}.iso.zip
    - run: |
            ls -liah
            export ISO=$PWD/$(ls *.iso)
            mkdir build
            mv $ISO build/kairos.iso
            ./earthly.sh +datasource-iso --CLOUD_CONFIG=tests/assets/autoinstall.yaml
            ./earthly.sh +run-qemu-datasource-tests --FLAVOR=${{ matrix.flavor }}

  qemu-bundles-tests:
    needs: 
    - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
       include:
         - flavor: "opensuse-leap"
    steps:
    - uses: actions/checkout@v3
    - run: |
        git fetch --prune --unshallow
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
          name: kairos-${{ matrix.flavor }}.iso.zip
    - run: |
            ls -liah
            export ISO=$PWD/$(ls *.iso)
            mkdir build
            mv $ISO build/kairos.iso
            ./earthly.sh +prepare-bundles-tests
            ./earthly.sh +run-qemu-bundles-tests --FLAVOR=${{ matrix.flavor }}

  qemu-reset-tests:
    needs: 
    - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
       include:
         - flavor: "alpine-opensuse-leap"
         - flavor: "opensuse-leap"
   #      - flavor: "ubuntu"
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
          name: kairos-${{ matrix.flavor }}.iso.zip
    - run: |
            ls -liah
            export ISO=$PWD/$(ls *.iso)
            mkdir build
            mv $ISO build/kairos.iso
            ./earthly.sh +datasource-iso --CLOUD_CONFIG=tests/assets/autoinstall.yaml
            ./earthly.sh +run-qemu-datasource-tests --TEST_SUITE=reset-test --FLAVOR=${{ matrix.flavor }}

  qemu-netboot-tests:
    needs:
    # Not really needs this, but it's a temporary "hack" to run them in sequence
    # TODO: Use built artifacts and don't rebuild them in the run-qemu-netboot-tests target
    - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
       include:
         - flavor: "alpine-opensuse-leap"
         - flavor: "opensuse-leap"
         - flavor: "ubuntu"
    steps:
    - uses: actions/checkout@v3
    - run: |
            ./earthly.sh +run-qemu-netboot-test --TEST_SUITE=netboot-test --FLAVOR=${{ matrix.flavor }}

  upgrade-with-cli-test:
    needs: 
    - build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
       include:
         - flavor: "alpine-opensuse-leap"
         - flavor: "opensuse-leap"
    #     - flavor: "ubuntu"
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: kairos-${{ matrix.flavor }}.iso.zip
    - name: Release space from worker
      run: |
        echo "Listing top largest packages"
        pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
        head -n 30 <<< "${pkgs}"
        echo
        df -h
        echo
        sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
        sudo apt-get remove --auto-remove android-sdk-platform-tools || true
        sudo apt-get purge --auto-remove android-sdk-platform-tools || true
        sudo rm -rf /usr/local/lib/android
        sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
        sudo rm -rf /usr/share/dotnet
        sudo apt-get remove -y '^mono-.*' || true
        sudo apt-get remove -y '^ghc-.*' || true
        sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
        sudo apt-get remove -y 'php.*' || true
        sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
        sudo apt-get remove -y '^google-.*' || true
        sudo apt-get remove -y azure-cli || true
        sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
        sudo apt-get remove -y '^gfortran-.*' || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        echo
        echo "Listing top largest packages"
        pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
        head -n 30 <<< "${pkgs}"
        echo
        sudo rm -rfv build || true
        df -h
    - run: |
            ls -liah
            export ISO=$PWD/$(ls *.iso)
            sudo mkdir build
            sudo mv $ISO build/
            ./earthly.sh +run-qemu-test --FLAVOR=${{ matrix.flavor }} --CONTAINER_IMAGE=ttl.sh/kairos-${{ matrix.flavor }}-${{ github.sha }}:8h --TEST_SUITE=upgrade-with-cli
    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: ${{ matrix.flavor }}-upgrade-test.logs.zip
        path: tests/**/logs/*
        if-no-files-found: warn

  upgrade-latest-with-cli-test:
    needs: 
    - build
    - latest-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
       include:
         - flavor: "alpine-opensuse-leap"
         - flavor: "opensuse-leap"
    #     - flavor: "ubuntu"
    steps:
    - uses: actions/checkout@v3
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: latest-release.zip
    - name: Release space from worker
      run: |
        echo "Listing top largest packages"
        pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
        head -n 30 <<< "${pkgs}"
        echo
        df -h
        echo
        sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
        sudo apt-get remove --auto-remove android-sdk-platform-tools || true
        sudo apt-get purge --auto-remove android-sdk-platform-tools || true
        sudo rm -rf /usr/local/lib/android
        sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
        sudo rm -rf /usr/share/dotnet
        sudo apt-get remove -y '^mono-.*' || true
        sudo apt-get remove -y '^ghc-.*' || true
        sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
        sudo apt-get remove -y 'php.*' || true
        sudo apt-get remove -y hhvm powershell firefox monodoc-manual msbuild || true
        sudo apt-get remove -y '^google-.*' || true
        sudo apt-get remove -y azure-cli || true
        sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
        sudo apt-get remove -y '^gfortran-.*' || true
        sudo apt-get autoremove -y
        sudo apt-get clean
        echo
        echo "Listing top largest packages"
        pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
        head -n 30 <<< "${pkgs}"
        echo
        sudo rm -rfv build || true
        df -h
    - run: |
            ls -liah
            export ISO=$PWD/$(ls kairos-${{matrix.flavor}}-*.iso)
            sudo mkdir build
            sudo mv $ISO build/
            ./earthly.sh +run-qemu-test --FLAVOR=${{ matrix.flavor }} --CONTAINER_IMAGE=ttl.sh/kairos-${{ matrix.flavor }}-${{ github.sha }}:8h --TEST_SUITE=upgrade-latest-with-cli
    - uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: ${{ matrix.flavor }}-upgrade-test.logs.zip
        path: tests/**/logs/*
        if-no-files-found: warn

