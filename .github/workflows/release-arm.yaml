name: Release ARM artifacts

on:
  push:
    tags:
      - v*
permissions: read-all
jobs:
  build-core:
    uses: kairos-io/kairos-factory-action/.github/workflows/reusable-factory.yaml@50727b6b5d97cf8f77e218eaf82b9362c24b3fd8 # v0.0.7
    secrets:
      registry_username: ${{ secrets.QUAY_USERNAME }}
      registry_password: ${{ secrets.QUAY_PASSWORD }}
    permissions:
      id-token: write  # OIDC support
      contents: write
      security-events: write
      actions: read
    strategy:
      fail-fast: false
      matrix:
        base_image:
          - "opensuse/leap:15.6"
          - "opensuse/tumbleweed:latest"
          - "ubuntu:20.04"
          - "ubuntu:22.04"
          - "ubuntu:24.04"
          - "ubuntu:24.10"
          - "alpine:3.21"
          - "fedora:40"
          - "debian:12"
          - "rockylinux:9"
    with:
      base_image: ${{ matrix.base_image }}
      arch: "amd64"
      model: "generic"
      version: "auto"
      registry_domain: "quay.io"
      registry_namespace: "kairos"
      iso: true
      grype: true
      grype_sarif: true
      trivy: true
      trivy_sarif: true
      list_release_artifacts: true
      cosign: true
      release: true
  build-core-rpi4:
    uses: kairos-io/kairos-factory-action/.github/workflows/reusable-factory.yaml@50727b6b5d97cf8f77e218eaf82b9362c24b3fd8 # v0.0.7
    secrets:
      registry_username: ${{ secrets.QUAY_USERNAME }}
      registry_password: ${{ secrets.QUAY_PASSWORD }}
    permissions:
      id-token: write  # OIDC support
      contents: write
      security-events: write
      actions: read
    strategy:
      fail-fast: false
      matrix:
        base_image:
          - "opensuse/leap:15.6"
          - "ubuntu:20.04"
          - "ubuntu:22.04"
          - "alpine:3.21"
    with:
      base_image: ${{ matrix.base_image }}
      arch: "arm64"
      model: "rpi4"
      version: "auto"
      grype: true
      grype_sarif: true
      trivy: true
      trivy_sarif: true
      list_release_artifacts: true
      cosign: true
  get-k3s-versions:
    runs-on: ubuntu-latest
    outputs:
      kubernetes_versions: ${{ steps.get-k3s-releases.outputs.kubernetes_versions }}
    steps:
      - run: |
          sudo apt update && sudo apt install -y jq curl
      - name: Get latest k3s releases
        id: get-k3s-releases
        run: |
          kubernetes_versions=$(curl -s https://api.github.com/repos/k3s-io/k3s/releases | jq -r '
            [.[] | select(.prerelease == false and .draft == false and (.tag_name | test("rc") | not)) | .tag_name]
            | map({
                version: .,
                minor: (split(".")[1:2]|join("")),
                patch: (split(".")[2:3]|join("")|split("+")[0]),
                revision: (split("+k3s")[1])
              })
            | group_by(.minor)
            | map(sort_by([(.patch | tonumber), (.revision | tonumber)]) | reverse | .[0])
            | sort_by(.minor | tonumber)
            | reverse
            | .[0:3]
            | map(.version)
          ' | jq -c '.')
          echo "kubernetes_versions=$kubernetes_versions" >> $GITHUB_OUTPUT
  build-standard:
    uses: kairos-io/kairos-factory-action/.github/workflows/reusable-factory.yaml@50727b6b5d97cf8f77e218eaf82b9362c24b3fd8 # v0.0.7
    secrets:
      registry_username: ${{ secrets.QUAY_USERNAME }}
      registry_password: ${{ secrets.QUAY_PASSWORD }}
    needs:
      - get-k3s-versions
    permissions:
      id-token: write  # OIDC support
      contents: write
      security-events: write
      actions: read
    strategy:
      fail-fast: false
      matrix:
        kubernetes_version: ${{ fromJson(needs.get-k3s-versions.outputs.kubernetes_versions) }}
        base_image:
          - "opensuse/leap:15.6"
          - "opensuse/tumbleweed:latest"
          - "ubuntu:20.04"
          - "ubuntu:22.04"
          - "ubuntu:24.04"
          - "ubuntu:24.10"
          - "alpine:3.21"
          - "fedora:40"
          - "debian:12"
          - "rockylinux:9"
    with:
      base_image: ${{ matrix.base_image }}
      arch: "amd64"
      model: "generic"
      kubernetes_version: ${{ matrix.kubernetes_version }}
      kubernetes_distro: "k3s"
      version: "auto"
      iso: true
      grype: true
      grype_sarif: true
      trivy: true
      trivy_sarif: true
      list_release_artifacts: true
      cosign: true
      release: true
  build-standard-rpi4:
    uses: kairos-io/kairos-factory-action/.github/workflows/reusable-factory.yaml@50727b6b5d97cf8f77e218eaf82b9362c24b3fd8 # v0.0.7
    secrets:
      registry_username: ${{ secrets.QUAY_USERNAME }}
      registry_password: ${{ secrets.QUAY_PASSWORD }}
    needs:
      - get-k3s-versions
    permissions:
      id-token: write  # OIDC support
      contents: write
      security-events: write
      actions: read
    strategy:
      fail-fast: false
      matrix:
        kubernetes_version: ${{ fromJson(needs.get-k3s-versions.outputs.kubernetes_versions) }}
        base_image:
          - "opensuse/leap:15.6"
          - "ubuntu:20.04"
          - "ubuntu:22.04"
          - "alpine:3.21"
    with:
      base_image: ${{ matrix.base_image }}
      arch: "amd64"
      model: "generic"
      kubernetes_version: ${{ matrix.kubernetes_version }}
      kubernetes_distro: "k3s"
      version: "auto"
      grype: true
      grype_sarif: true
      trivy: true
      trivy_sarif: true
      list_release_artifacts: true
      cosign: true
  build-nvidia-base:
    runs-on: 'ubuntu-24.04-arm'
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx for public runners
        if: runner.environment == 'github-hosted'
        uses: docker/setup-buildx-action@master
      - name: Set up Docker Buildx for custom runners
        if: runner.environment == 'self-hosted'
        uses: docker/setup-buildx-action@master
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["registry.docker-mirror.svc.cluster.local:5000"]
            [registry."registry.docker-mirror.svc.cluster.local:5000"]
              insecure = true
              http = true
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        if: runner.environment == 'self-hosted'
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - name: Login to Quay Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Build  ðŸ”§ & Push ðŸš€
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: images/
          file: images/Dockerfile.nvidia
          platforms: linux/arm64
          push: true
          tags: quay.io/kairos/cache:nvidia-base
  nvidia-arm-core:
    uses: kairos-io/kairos-factory-action/.github/workflows/reusable-factory.yaml@50727b6b5d97cf8f77e218eaf82b9362c24b3fd8 # v0.0.7
    secrets:
      registry_username: ${{ secrets.QUAY_USERNAME }}
      registry_password: ${{ secrets.QUAY_PASSWORD }}
    permissions:
      id-token: write  # OIDC support
      contents: write
      security-events: write
      actions: read
    needs: build-nvidia-base
    with:
      base_image: "quay.io/kairos/cache:nvidia-base"
      arch: "arm64"
      model: "nvidia-jetson-agx-orin"
      version: "auto"
      grype: true
      grype_sarif: true
      trivy: true
      trivy_sarif: true
      list_release_artifacts: true
      cosign: true
      release: true
