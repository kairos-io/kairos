name: Release ARM artifacts

on:
  push:
    tags:
      - v*
permissions: read-all
jobs:
  build-core:
    uses: ./.github/workflows/reusable-release.yaml
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        model: ["generic"]
        variant: ["core"]
        arch: ["arm64"]
        base_image:
          - "opensuse/leap:15.6"
          - "opensuse/tumbleweed"
          - "ubuntu:20.04"
          - "ubuntu:22.04"
          - "ubuntu:24.04"
          - "ubuntu:24.10"
          - "alpine:3.19"
          - "fedora:40"
          - "debian:12"
          - "rockylinux:9"
    with:
      base_image: ${{ matrix.base_image }}
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
      model: ${{ matrix.model }}
  get-k3s-versions:
    runs-on: ubuntu-latest
    outputs:
      kubernetes_versions: ${{ steps.get-k3s-releases.outputs.kubernetes_versions }}
    steps:
      - run: |
          sudo apt update && sudo apt install -y jq curl
      - name: Get latest k3s releases
        id: get-k3s-releases
        run: |
          kubernetes_versions=$(curl -s https://api.github.com/repos/k3s-io/k3s/releases | jq -r '[.[] | select(.prerelease == false and .draft == false and (.tag_name | test("rc") | not))] | .[:3] | .[].tag_name' | tr '\n' ' ')
          echo "kubernetes_versions=$kubernetes_versions" >> $GITHUB_OUTPUT
  build-standard:
    uses: ./.github/workflows/reusable-release.yaml
    needs:
      - get-k3s-versions
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        kubernetes_version: ${{ needs.get-k3s-versions.outputs.kubernetes_versions }}
        model: ["generic"]
        variant: ["standard"]
        arch: ["arm64"]
        base_image:
          - "opensuse/leap:15.6"
          - "opensuse/tumbleweed"
          - "ubuntu:20.04"
          - "ubuntu:22.04"
          - "ubuntu:24.04"
          - "ubuntu:24.10"
          - "alpine:3.19"
          - "fedora:40"
          - "debian:12"
          - "rockylinux:9"
    with:
      base_image: ${{ matrix.base_image }}
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
      model: ${{ matrix.model }}
      kubernetes_version: ${{ matrix.kubernetes_version }}
  build-nvidia-base:
    runs-on: fast
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx for public runners
        if: runner.environment == 'github-hosted'
        uses: docker/setup-buildx-action@master
      - name: Set up Docker Buildx for custom runners
        if: runner.environment == 'self-hosted'
        uses: docker/setup-buildx-action@master
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["registry.docker-mirror.svc.cluster.local:5000"]
            [registry."registry.docker-mirror.svc.cluster.local:5000"]
              insecure = true
              http = true
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        if: runner.environment == 'self-hosted'
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - name: Login to Quay Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Build  ðŸ”§ & Push ðŸš€
        uses: docker/build-push-action@v6
        with:
          context: images/
          file: images/Dockerfile.nvidia
          platforms: linux/arm64
          push: true
          tags: quay.io/kairos/cache:nvidia-base
  nvidia-arm-core:
    uses: ./.github/workflows/reusable-release.yaml
    permissions:
      id-token: write  # OIDC support
      contents: write
      security-events: write
      actions: read
      attestations: read
      checks: read
      deployments: read
      discussions: read
      issues: read
      packages: read
      pages: read
      pull-requests: read
      repository-projects: read
      statuses: read
    needs: build-nvidia-base
    with:
      base_image: ${{ matrix.base_image }}
      arch: ${{ matrix.arch }}
      variant: ${{ matrix.variant }}
      model: ${{ matrix.model }}
    strategy:
      fail-fast: false
      matrix:
        model: ["nvidia-jetson-agx-orin"]
        variant: ["core"]
        arch: ["arm64"]
        base_image:
          - "quay.io/kairos/cache:nvidia-base"
