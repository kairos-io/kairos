name: Reusable workflow that builds a specific Kairos flavor

on:
  workflow_call:
    inputs:
      base_image:
        required: true
        type: string
      model:
        required: false
        type: string
        default: "generic"
      variant:
        required: false
        type: string
        default: "core"
      arch:
        required: false
        type: string
        default: "amd64"
      kubernetes_version:
        required: false
        type: string
      kubernetes_distro:
        required: false
        type: string
      event_type:
        required: true
        type: string

jobs:
  build:
    runs-on: ${{ inputs.arch == 'arm64' && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    name: Build ${{ inputs.base_image }} - ${{ inputs.model }} - ${{ inputs.variant }} - ${{ inputs.arch }}${{ inputs.kubernetes_distro != '' && format(' - {0}', inputs.kubernetes_distro) || '' }}${{ inputs.kubernetes_version != '' && format(' - {0}', inputs.kubernetes_version) || '' }}
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
      models: none
    steps:
      - name: Split base image
        id: split
        run: |
          # All of this becuase opensuse/leap:15.6 has to be pushed to the opensuse repo instead of having opensuse-leap and opensuse-tumbleweed...
          base_image=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 1)
          tag=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 2 || echo 'latest')

          # Check if the base image contains a slash
          if [[ "$base_image" == *"/"* ]]; then
            # Split the base image into distro and sub-distro
            distro=$(echo "$base_image" | cut -d '/' -f 1)
            sub_distro=$(echo "$base_image" | cut -d '/' -f 2)
            # Combine sub-distro and tag
            tag="$sub_distro-$tag"
          else
            # Use the base image as the distro
            distro="$base_image"
          fi

          # Special case for nvidia as we build 2 different images and the base_image is our cached image
          # For release this makes no sense as we always build the base image anyway
          # TODO: Add support for nvidia-jetson-agx-orin in kairos-init so we can build it properly
          if [[ "${{ inputs.model }}" == "nvidia-jetson-agx-orin" ]]; then
            distro="ubuntu"
            tag="22.04"
          fi

          echo "flavor=$distro" >> $GITHUB_OUTPUT
          echo "flavor_release=$tag" >> $GITHUB_OUTPUT
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: '0'
      - name: Set Version
        run: echo "VERSION=$(git describe --tags --dirty )" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to Quay Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Set Image tag
        run: |
          IMAGE_NAME="quay.io/kairos/ci-temp-images:${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.arch }}-${{ inputs.model }}"
          # Add kubernetes_distro and kubernetes_version if they are set
          if [[ -n "${{ inputs.kubernetes_distro }}" ]]; then
            IMAGE_NAME+="-${{ inputs.kubernetes_distro }}"
          fi
          if [[ -n "${{ inputs.kubernetes_version }}" ]]; then
            IMAGE_NAME+="-${{ inputs.kubernetes_version }}"
          fi
          echo "IMAGE_NAME=$IMAGE_NAME-${{ github.sha }}" >> $GITHUB_ENV
      - name: Build container ðŸ”§
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6
        with:
          context: .
          file: images/Dockerfile
          platforms: linux/${{ inputs.arch }}
          load: true
          tags: ${{ env.IMAGE_NAME }}
          # https://docs.redhat.com/en/documentation/red_hat_quay/3.4/html/use_red_hat_quay/working_with_tags#tag-expiration
          labels: |
            quay.expires-after=6h
          build-args: |
            BASE_IMAGE=${{ inputs.base_image }}
            MODEL=${{ inputs.model }}
            VARIANT=${{ inputs.variant }}
            KUBERNETES_DISTRO=${{ inputs.kubernetes_distro }}
            KUBERNETES_VERSION=${{ inputs.kubernetes_version }}
            VERSION=${{ env.VERSION }}
      - name: Build iso ðŸ“¦
        if: ${{ inputs.model == 'generic' }}
        run: |
          mkdir build
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD/build/:/output \
          quay.io/kairos/auroraboot:latest --debug build-iso --output /output/ \
          --name kairos-${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.arch }}-${{ github.sha }} \
          docker:${{ env.IMAGE_NAME }}
      - name: Install Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5
        timeout-minutes: 5
        with:
          go-version-file: tests/go.mod
          cache-dependency-path: tests/go.sum
          cache: ${{ runner.environment == 'self-hosted' && 'false' || 'true' }}
      - name: Enable KVM group perms
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu qemu-system-x86 qemu-system-x86 qemu-utils qemu-kvm acl udev mkisofs swtpm
          sudo setfacl -m u:runner:rwx /dev/kvm
      - name: Run tests
        env:
          USE_QEMU: true
          KVM: true
          MEMORY: 5000
          DRIVE_SIZE: 50000
          CREATE_VM: true
          CPUS: 4
        run: |
          export ISO=$PWD/$(ls build/*.iso| head -1 )
          echo "ISO is: $ISO"
          cp tests/go.* .
          go mod download
          go run github.com/onsi/ginkgo/v2/ginkgo -v --label-filter "provider-decentralized-k8s" --fail-fast -r ./tests/
      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
        if: failure()
        with:
          name: ${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn