name: Reusable workflow that runs tests with qemu

on:
  workflow_call:
    inputs:
      test:
        required: true
        type: string
      base_image:
        required: true
        type: string
      variant:
        required: true
        type: string
      secureboot:
        required: false
        type: boolean
        default: false
      arch:
        required: true
        type: string
      model:
        required: false
        type: string
        default: "generic"
      kubernetes_distro:
        required: false
        type: string
      release-matcher:
        description: "The release matcher to use for the latest release. Full regex match"
        required: false
        type: string
        default: ""

permissions: read-all
jobs:
  test:
    runs-on: fast
    name: ${{ inputs.test }}${{ inputs.secureboot == true && ' - SecureBoot' || '' }}
    steps:
      - name: Split base image
        id: split
        run: |
          # All of this becuase opensuse/leap:15.6 has to be pushed to the opensuse repo instead of having opensuse-leap and opensuse-tumbleweed...
          base_image=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 1)
          tag=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 2 || echo 'latest')

          # Check if the base image contains a slash
          if [[ "$base_image" == *"/"* ]]; then
            # Split the base image into distro and sub-distro
            distro=$(echo "$base_image" | cut -d '/' -f 1)
            sub_distro=$(echo "$base_image" | cut -d '/' -f 2)
            # Combine sub-distro and tag
            tag="$sub_distro-$tag"
          else
            # Use the base image as the distro
            distro="$base_image"
          fi

          echo "flavor=$distro" >> $GITHUB_OUTPUT
          echo "flavor_release=$tag" >> $GITHUB_OUTPUT
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install Go
        uses: actions/setup-go@v5
        timeout-minutes: 5
        with:
          go-version-file: tests/go.mod
          cache-dependency-path: tests/go.sum
          cache: ${{ runner.environment == 'self-hosted' && 'false' || 'true' }}
      - name: Set up Docker Buildx for public runners
        if: runner.environment == 'github-hosted'
        uses: docker/setup-buildx-action@master
      - name: Set up Docker Buildx for custom runners
        if: runner.environment == 'self-hosted'
        uses: docker/setup-buildx-action@master
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["registry.docker-mirror.svc.cluster.local:5000"]
            [registry."registry.docker-mirror.svc.cluster.local:5000"]
              insecure = true
              http = true
      - name: Login to Quay Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        if: runner.environment == 'self-hosted'
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - name: Enable KVM group perms
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu qemu-system-x86 qemu-system-x86 qemu-utils qemu-kvm acl udev mkisofs swtpm
          sudo setfacl -m u:runner:rwx /dev/kvm
      - name: Download artifacts
        if: ${{ inputs.test != 'upgrade-latest' && inputs.test != 'provider-upgrade-latest-k8s-with-kubernetes' }}
        uses: actions/download-artifact@v4.1.9
        with:
          name: kairos-${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.arch }}-${{ inputs.model }}${{ inputs.kubernetes_distro != '' && format('-{0}', inputs.kubernetes_distro) || '' }}.iso.zip
      - name: Download latest release
        uses: robinraju/release-downloader@v1.12
        if: ${{ (inputs.test == 'upgrade-latest' || inputs.test == 'provider-upgrade-latest-k8s-with-kubernetes') && inputs.release-matcher == '' }}
        with:
          latest: true
          fileName: 'kairos-${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.arch }}-${{ inputs.model }}-*.iso'
          out-file-path: ""
      - name: Download latest release with release matcher
        uses: robinraju/release-downloader@v1.12
        if: ${{ (inputs.test == 'upgrade-latest' || inputs.test == 'provider-upgrade-latest-k8s-with-kubernetes') && inputs.release-matcher != '' }}
        with:
          latest: true
          fileName: ${{ inputs.release-matcher }}
          out-file-path: ""
      - name: Prepare test bundle
        if: ${{ inputs.test == 'bundles' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: examples/bundle/Dockerfile
          platforms: linux/${{ inputs.arch }}
          push: true
          tags: quay.io/kairos/ci-temp-images:bundles-test
          # https://docs.redhat.com/en/documentation/red_hat_quay/3.4/html/use_red_hat_quay/working_with_tags#tag-expiration
          labels: |
            quay.expires-after=6h
      - name: Run tests
        env:
          USE_QEMU: true
          KVM: true
          MEMORY: 5000
          DRIVE_SIZE: 50000
          CREATE_VM: true
          CPUS: 4
          CONTAINER_IMAGE: quay.io/kairos/ci-temp-images:${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.arch }}-${{ github.sha }}
        run: |
          if [ "${{ inputs.secureboot }}" = "true" ]; then
            export FIRMWARE=/usr/share/OVMF/OVMF_CODE.fd
            echo "Secure boot enabled, setting firmware to $FIRMWARE"
          fi
          export ISO=$PWD/$(ls *.iso|grep -v ipxe | head -1 )
          echo "ISO is: $ISO"
          cp tests/go.* .
          go mod download
          go run github.com/onsi/ginkgo/v2/ginkgo -v --label-filter "${{ inputs.test }}" --fail-fast -r ./tests/
      - uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.test }}.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
