name: Reusable UKI test

on:
  workflow_call:
    inputs:
      base_image:
        required: true
        type: string
      flavor:
        required: true
        type: string
      flavor_release:
        required: true
        type: string
      variant:
        required: true
        type: string
      model:
        required: true
        type: string
permissions: read-all
jobs:
  test-uki:
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    runs-on: kvm
    env:
      FLAVOR: ${{ inputs.flavor }}
      FLAVOR_RELEASE: ${{ inputs.flavor_release }}
    steps:
      - name: Install earthly
        uses: Luet-lab/luet-install-action@cec77490c3f2416d7d07a47cfab04d448641d7ce # v1.1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - name: Install Go
        uses: actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a # v5
        with:
          go-version-file: tests/go.mod
          cache-dependency-path: tests/go.sum
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Enable KVM group perms and install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu qemu-system-x86 qemu-system-x86 qemu-utils qemu-kvm acl udev mkisofs
          # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
          # echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          # sudo udevadm control --reload-rules
          # sudo udevadm trigger --name-match=kvm
          # sudo usermod -a -G kvm,libvirt $USER
          #
          # TODO: Switch back to the above solution when we switch to the github runners
          # https://askubuntu.com/a/1081326
          sudo setfacl -m u:runner:rwx /dev/kvm
      - name: Build the docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: images/Dockerfile
          platforms: linux/amd64
          load: true
          tags: ${{ inputs.flavor }}-init:${{ inputs.flavor_release }}
          build-args: |
            BASE_IMAGE=${{ inputs.base_image }}
            MODEL=${{ inputs.model }}
            VARIANT=${{ inputs.variant }}
            TRUSTED_BOOT=true
      - name: Build uki ISO ðŸ”§
        run: |
          mkdir build
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD/tests/assets/keys:/keys \
          -v $PWD/tests/assets/sysext/:/overlay \
          -v $PWD/build/:/output \
          quay.io/kairos/auroraboot:latest --debug build-uki --output-dir /output/ -k /keys --output-type iso \
          --single-efi-cmdline="testentry: nothing" \
          --overlay-iso /overlay \
          docker:${{ inputs.flavor }}-init:${{ inputs.flavor_release }}
      - name: Create datasource iso ðŸ”§
        run: |
          cp tests/assets/uki-install.yaml user-data
          touch meta-data
          mkisofs -output build/datasource.iso -volid cidata -joliet -rock user-data meta-data
      - name: Build uki upgrade image ðŸ”§
        run: |
          rm -rf /tmp/unpacked
          sudo luet util unpack ${{ inputs.flavor }}-init:${{ inputs.flavor_release }} ./unpacked --local
          new_version="mynewversion"
          sudo sed -i 's/^KAIROS_VERSION=.*/KAIROS_VERSION="'$new_version'"/' ./unpacked/etc/kairos-release
          echo "$new_version" > "${PWD}/build/expected_new_version"

          docker run --rm \
            -v $PWD/unpacked:/unpacked \
            -v $PWD/build:/result \
            -v $PWD/tests/assets/keys:/keys \
            quay.io/kairos/auroraboot:latest --debug build-uki \
            --output-dir /result --keys /keys --output-type container \
            dir:/unpacked

          docker load -i build/*.tar
          image=$(docker load -i build/*.tar | grep "Loaded image" | awk -F: '{ st = index($0,":");print substr($0,st+1)}' | xargs)
          rand=$(head /dev/urandom | tr -dc a-z0-9 | head -c 7)
          temp_image=ttl.sh/$(echo $image | sed "s/:latest/-${rand}:6h/")
          docker tag $image $temp_image
          docker push $temp_image
          echo $temp_image > build/upgrade_image_name
      - name: Run tests ðŸ”§
        env:
          USE_QEMU: true
          KVM: true
          MEMORY: 6000
          CPUS: 4
          FIRMWARE: /usr/share/OVMF/OVMF_CODE.fd
          EMULATE_TPM: true
          UKI_TEST: true
        run: |
          export ISO=$(ls $PWD/build/kairos_*.iso)
          export DATASOURCE=${PWD}/build/datasource.iso
          export UPGRADE_IMAGE=$(cat "${PWD}/build/upgrade_image_name")
          export EXPECTED_NEW_VERSION=$(cat "${PWD}/build/expected_new_version")
          export EXPECTED_SINGLE_ENTRY="testentry"
          cp tests/go.* .
          go run github.com/onsi/ginkgo/v2/ginkgo -v --label-filter "uki" --fail-fast -r ./tests/
      - name: Install kairos-agent (for versioneer)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && inputs.flavor == 'ubuntu' }}
        uses: Luet-lab/luet-install-action@cec77490c3f2416d7d07a47cfab04d448641d7ce # v1.1
        with:
          repository: quay.io/kairos/packages
          packages: system/kairos-agent
      - name: Install Cosign
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && inputs.flavor == 'ubuntu' }}
        uses: sigstore/cosign-installer@main
      - name: Login to Quay Registry
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && inputs.flavor == 'ubuntu' }}
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Push to quay
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' && inputs.flavor == 'ubuntu' }}
        env:
          COSIGN_YES: true
        run: |
          SUFFIX="-uki"
          IMAGE=$(FLAVOR=${{ inputs.flavor }} FLAVOR_RELEASE="${{ inputs.flavor_release }}" MODEL=generic TARGETARCH=amd64 VARIANT=${{ inputs.variant }} REGISTRY_AND_ORG="quay.io/kairos" RELEASE=master kairos-agent versioneer container-artifact-name)
          docker tag ${{ inputs.flavor }}-init:${{ inputs.flavor_release }} "$IMAGE$SUFFIX"
          docker push "$IMAGE$SUFFIX"
          image_ref=$(docker image inspect --format='{{index .RepoDigests 0}}' "$IMAGE$SUFFIX")
          cosign sign $image_ref
      - uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4
        if: failure()
        with:
          name: ${{ inputs.flavor }}-${{ inputs.flavor_release }}-${{ inputs.variant }}-uki.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
