name: Reusable UKI test

on:
  workflow_call:
    inputs:
      base_image:
        required: true
        type: string
      variant:
        required: true
        type: string
      model:
        required: true
        type: string
      test_label:
        required: false
        type: string
        default: "generic"
      kubernetes_distro:
        required: false
        type: string
jobs:
  test-uki:
    name: Test ${{ inputs.test_label }} ${{ inputs.kubernetes_distro != '' && format(' - {0}', inputs.kubernetes_distro) || '' }}
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    runs-on: kvm
    steps:
      - name: Split base image
        id: split
        run: |
          # All of this becuase opensuse/leap:15.6 has to be pushed to the opensuse repo instead of having opensuse-leap and opensuse-tumbleweed...
          base_image=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 1)
          tag=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 2 || echo 'latest')

          # Check if the base image contains a slash
          if [[ "$base_image" == *"/"* ]]; then
            # Split the base image into distro and sub-distro
            distro=$(echo "$base_image" | cut -d '/' -f 1)
            sub_distro=$(echo "$base_image" | cut -d '/' -f 2)
            # Combine sub-distro and tag
            tag="$sub_distro-$tag"
          else
            # Use the base image as the distro
            distro="$base_image"
          fi

          echo "flavor=$distro" >> $GITHUB_OUTPUT
          echo "flavor_release=$tag" >> $GITHUB_OUTPUT
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: '0'
      - name: Set Version
        run: echo "VERSION=$(git describe --tags --dirty )" >> $GITHUB_ENV
      - name: Install Go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5
        timeout-minutes: 5
        with:
          go-version-file: tests/go.mod
          cache-dependency-path: tests/go.sum
          cache: ${{ runner.environment == 'self-hosted' && 'false' || 'true' }}
      - name: Set up Docker Buildx for public runners
        if: runner.environment == 'github-hosted'
        uses: docker/setup-buildx-action@master
      - name: Set up Docker Buildx for custom runners
        if: runner.environment == 'self-hosted'
        uses: docker/setup-buildx-action@master
        with:
          buildkitd-config-inline: |
            [registry."docker.io"]
              mirrors = ["registry.docker-mirror.svc.cluster.local:5000"]
            [registry."registry.docker-mirror.svc.cluster.local:5000"]
              insecure = true
              http = true
      - name: Enable KVM group perms and install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu qemu-system-x86 qemu-system-x86 qemu-utils qemu-kvm acl udev mkisofs swtpm
          # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
          # echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          # sudo udevadm control --reload-rules
          # sudo udevadm trigger --name-match=kvm
          # sudo usermod -a -G kvm,libvirt $USER
          #
          # TODO: Switch back to the above solution when we switch to the github runners
          # https://askubuntu.com/a/1081326
          sudo setfacl -m u:runner:rwx /dev/kvm
      - name: Login to Quay Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Set Image tag
        run: |
          echo "IMAGE_NAME=quay.io/kairos/ci-temp-images:${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-amd64-${{ inputs.model }}-${{ github.sha }}${{ inputs.kubernetes_version && '-'||''}}${{ inputs.kubernetes_version || ''}}-uki" >> $GITHUB_ENV
      - name: Build the docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          file: images/Dockerfile
          platforms: linux/amd64
          load: true
          tags: ${{ env.IMAGE_NAME }}
          # https://docs.redhat.com/en/documentation/red_hat_quay/3.4/html/use_red_hat_quay/working_with_tags#tag-expiration
          labels: |
            quay.expires-after=6h
          build-args: |
            BASE_IMAGE=${{ inputs.base_image }}
            MODEL=${{ inputs.model }}
            TRUSTED_BOOT=true
            VERSION=${{ env.VERSION }}
            KUBERNETES_DISTRO=${{ inputs.kubernetes_distro }}
            REGISTRY=quay.io/kairos
      - name: Grype check
        uses: anchore/scan-action@2c901ab7378897c01b8efaa2d0c9bf519cc64b9e # v6.2.0
        id: grype
        with:
          image: ${{ env.IMAGE_NAME }}
          output-format: json
          severity-cutoff: critical
          add-cpes-if-none: true
          only-fixed: true
          fail-build: false
      - name: Grype detailed check
        run: |
          jq -r '.matches[] | select(.vulnerability.severity == "Critical") | "\(.vulnerability.id) \t \(.artifact.name) \(.artifact.version) -> \(.artifact.locations[]?.path // "no-path")"' "${{ steps.grype.outputs.json }}" | tee grype-critical.txt

          if [[ $(wc -l < grype-critical.txt) -gt 0 ]]; then
            echo "Critical vulnerabilities found in the image. Failing the build."
            exit 1
          else
            echo "No critical vulnerabilities found in the image."
          fi
      - name: Build uki ISO ðŸ”§
        run: |
          mkdir build
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $PWD/tests/assets/keys:/keys \
          -v $PWD/tests/assets/sysext/:/overlay \
          -v $PWD/build/:/output \
          quay.io/kairos/auroraboot:v0.8.3 --debug build-uki --output-dir /output/ -k /keys --output-type iso \
          --single-efi-cmdline="testentry: nothing" \
          --overlay-iso /overlay \
          docker:${{ env.IMAGE_NAME }}
      - name: Build uki upgrade image ðŸ”§
        if: ${{ inputs.test_label != 'boot-assessment' }}
        run: |
          echo "Building upgrade image for ${{ inputs.test_label }}"
          docker build -t upgrade-image - <<EOF
          FROM ${{ env.IMAGE_NAME }}
          RUN echo "Current release info: \$(cat /etc/kairos-release)"
          RUN sed -i 's/^KAIROS_VERSION=.*/KAIROS_VERSION="mynewversion"/' /etc/kairos-release
          RUN echo "New release info: \$(cat /etc/kairos-release)"
          EOF

          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $PWD/build:/result \
            -v $PWD/tests/assets/keys:/keys \
            quay.io/kairos/auroraboot:v0.8.3 --debug build-uki \
            --output-dir /result --keys /keys --output-type container \
            docker:upgrade-image

          image=$(docker load -i build/*.tar | grep "Loaded image" | awk -F: '{ st = index($0,":");print substr($0,st+1)}' | sed 's/+/-/g' | xargs)
          echo "Image: $image"
          rand=$(head /dev/urandom | tr -dc a-z0-9 | head -c 7)
          temp_image=quay.io/kairos/ci-temp-images:$(echo $image | sed "s/:latest/-${rand}/")
          docker build --label quay.expires-after="6h" --tag $temp_image - <<EOF
          FROM $image
          EOF
          docker push $temp_image
          echo $temp_image > build/upgrade_image_name
      - name: Run tests ðŸ”§
        env:
          USE_QEMU: true
          KVM: true
          MEMORY: 6000
          CPUS: 4
          FIRMWARE: /usr/share/OVMF/OVMF_CODE.fd
          EMULATE_TPM: true
          UKI_TEST: true
        run: |
          export ISO=$(ls $PWD/build/kairos-*-uki.iso)
          export UPGRADE_IMAGE=$(cat "${PWD}/build/upgrade_image_name")
          export EXPECTED_NEW_VERSION="mynewversion"
          export EXPECTED_SINGLE_ENTRY="testentry"
          cp tests/go.* .
          go run github.com/onsi/ginkgo/v2/ginkgo -v --label-filter "${{ inputs.test_label }}" --fail-fast -r ./tests/
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        if: failure()
        with:
          name: ${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.test_label }}-uki.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
