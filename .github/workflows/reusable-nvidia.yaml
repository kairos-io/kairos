name: Reusable Nvidia Jetson AGX Orin workflow

on:
  workflow_call:

jobs:
  base:
    runs-on: fast
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if cache image is available
        id: cache
        run: |
          if docker pull quay.io/kairos/cache:nvidia-base; then
            echo "cache_available=true" >> $GITHUB_OUTPUT
          else
            echo "cache_available=false" >> $GITHUB_OUTPUT
          fi
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files_yaml: |
            nvidia:
              - 'images/Dockerfile.nvidia'
      - name: Calculate if rest of steps should run
        id: run_steps
        run: |
          if [[ "${{ steps.cache.outputs.cache_available }}" == "false" || "${{ steps.changed-files.outputs.nvidia_any_changed }}" == "true" || "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "run_steps=true" >> $GITHUB_OUTPUT
          else
            echo "run_steps=false" >> $GITHUB_OUTPUT
          fi
      - name: Install kairos-agent (for versioneer)
        uses: Luet-lab/luet-install-action@v1.1
        with:
          repository: quay.io/kairos/packages
          packages: system/kairos-agent
      - name: Release space from worker
        if: ${{ steps.run_steps.outputs.run_steps == 'true' }}
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm || true
          sudo apt-get remove -y powershell || true
          sudo apt-get remove -y firefox || true
          sudo apt-get remove -y monodoc-manual || true
          sudo apt-get remove -y msbuild || true
          sudo apt-get remove -y microsoft-edge-stable || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - name: Set up Docker Buildx
        if: ${{ steps.run_steps.outputs.run_steps == 'true' }}
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        if: ${{ steps.run_steps.outputs.run_steps == 'true' }}
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - name: Login to Quay Registry
        if: ${{ github.ref == 'refs/heads/master' && startsWith(github.ref, 'refs/tags/v') }}
        run: echo ${{ secrets.QUAY_PASSWORD }} | docker login -u ${{ secrets.QUAY_USERNAME }} --password-stdin quay.io
      - name: Build  ðŸ”§ & Push ðŸš€
        if: ${{ steps.run_steps.outputs.run_steps == 'true' }}
        run: |
          export IMAGE=quay.io/kairos/cache:nvidia-base
          docker build --platform=linux/arm64 -t $IMAGE -f ./images/Dockerfile.nvidia ./images
          docker push $IMAGE

  core:
    needs: base
    runs-on: ubuntu-latest
    steps:
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v42
        with:
          files_yaml: |
            nvidia:
              - 'images/Dockerfile.nvidia'
      - name: Calculate if rest of steps should run
        id: run_steps
        run: |
          if [[ "${{ steps.changed-files.outputs.nvidia_any_changed }}" == "true" || "${{ github.ref }}" == "refs/tags/master" || "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "run_steps=true" >> $GITHUB_OUTPUT
          else
            echo "run_steps=false" >> $GITHUB_OUTPUT
          fi
      - name: build
        uses: ./.github/workflows/reusable-docker-arm-build.yaml
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' || needs.base.outputs.changed-files.outputs.nvidia_any_changed == 'true' }}
        with:
          flavor: ubuntu
          flavor_release: "20.04"
          family: ubuntu
          base_image: quay.io/kairos/cache:nvidia-base
          model: nvidia-jetson-agx-orin
          worker: fast
