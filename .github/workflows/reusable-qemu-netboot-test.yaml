name: Reusable workflow - qemu netboot test

on:
  workflow_call:
    inputs:
      base_image:
        required: true
        type: string
      variant:
        required: true
        type: string
      arch:
        required: true
        type: string
      model:
        required: true
        type: string

permissions: read-all
jobs:
  netboot:
    runs-on: kvm
    steps:
      - name: Split base image
        id: split
        run: |
          # All of this becuase opensuse/leap:15.6 has to be pushed to the opensuse repo instead of having opensuse-leap and opensuse-tumbleweed...
          base_image=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 1)
          tag=$(echo "${{ inputs.base_image }}" | cut -d ':' -f 2 || echo 'latest')

          # Check if the base image contains a slash
          if [[ "$base_image" == *"/"* ]]; then
            # Split the base image into distro and sub-distro
            distro=$(echo "$base_image" | cut -d '/' -f 1)
            sub_distro=$(echo "$base_image" | cut -d '/' -f 2)
            # Combine sub-distro and tag
            tag="$sub_distro-$tag"
          else
            # Use the base image as the distro
            distro="$base_image"
          fi

          echo "flavor=$distro" >> $GITHUB_OUTPUT
          echo "flavor_release=$tag" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - name: Block all traffic to metadata ip  # For cloud runners, the metadata ip can interact with our test machines
        if: runner.environment == 'self-hosted'
        run: |
          sudo iptables -I INPUT -s 169.254.169.254 -j DROP
          sudo iptables -I OUTPUT -d 169.254.169.254 -j DROP
      - name: Install Go
        uses: actions/setup-go@v5
        timeout-minutes: 5
        with:
          go-version-file: tests/go.mod
          cache-dependency-path: tests/go.sum
          cache: ${{ runner.environment == 'self-hosted' && 'false' || 'true' }}
      - uses: actions/checkout@v4
        with:
          repository: "ipxe/ipxe"
          path: "ipxe"
          fetch-depth: '0'
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y mtools syslinux isolinux git make gcc liblzma-dev mkisofs xorriso build-essential qemu-utils qemu-system-x86 swtpm
      - name: Build iPXE iso with our script on it
        run: |
          cp tests/assets/kairos.ipxe ipxe/src/kairos.ipxe
          pushd ipxe/src && make bin/ipxe.iso EMBED=kairos.ipxe && popd
          cp ipxe/src/bin/ipxe.iso ipxe.iso
      - name: Download ISO
        id: iso
        uses: actions/download-artifact@v4.1.8
        with:
          name: kairos-${{ steps.split.outputs.flavor }}-${{ steps.split.outputs.flavor_release }}-${{ inputs.variant }}-${{ inputs.arch }}-${{ inputs.model }}.iso.zip
      - name: Extract ipxe artifacts for the ipxe server
        run: |
          mkdir -p build
          export ISO=$(ls $PWD/*${{ steps.split.outputs.flavor }}*.iso)
          isoinfo -x /rootfs.squashfs -R -i ${ISO} > build/kairos.squashfs
          isoinfo -x /boot/kernel -R -i ${ISO} > build/kairos-kernel
          isoinfo -x /boot/initrd -R -i ${ISO} > build/kairos-initrd
      - name: Run tests
        env:
          USE_QEMU: true
          KVM: true
          MEMORY: 4000
          CPUS: 2
        run: |
          # Run the http server in the background
          docker run -d -v $PWD/build/:/build --workdir=/build --net=host python:3.11.0-alpine python3 -m http.server 80
          export ISO=$PWD/ipxe.iso
          cp tests/go.* .
          go mod download
          go run github.com/onsi/ginkgo/v2/ginkgo -v --label-filter "netboot-test" --fail-fast -r ./tests/
