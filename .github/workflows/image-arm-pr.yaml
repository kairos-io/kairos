name: 'Push latest ARM images'

on:
  pull_request:
    paths:
      - '**'

concurrency:
  group: ci-arm-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true
env:
  FORCE_COLOR: 1

jobs:
  opensuse:
    uses: ./.github/workflows/reusable-docker-arm-build.yaml
    with:
      flavor: opensuse
      flavor_release: leap-15.5
      family: opensuse
      base_image: opensuse/leap:15.5
      model: rpi4
      worker: fast
  alpine:
    uses: ./.github/workflows/reusable-docker-arm-build.yaml
    with:
      flavor: alpine
      flavor_release: "3.19"
      family: alpine
      base_image: alpine:3.19
      model: rpi4
      worker: fast
  ubuntu-standard:
    runs-on: equinix-2cpu-8gb
    permissions:
      id-token: write  # OIDC support
      contents: write
      actions: read
      security-events: write
    steps:
      - name: size of docker images
        run: |
          docker images --format "{{.Size}} - {{.Repository}}:{{.Tag}}"
      - name: remove unused docker images
        run: |
          docker rmi node:16
          docker rmi node:18
          docker rmi node:20
          docker rmi node:16-alpine
          docker rmi node:18-alpine
          docker rmi node:20-alpine
          docker rmi debian:10
      - name: Release space from worker
        run: |
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 30 <<< "${pkgs}"
          echo
          df -h
          echo
          sudo apt-get remove -y '^llvm-.*|^libllvm.*' || true
          sudo apt-get remove --auto-remove android-sdk-platform-tools || true
          sudo apt-get purge --auto-remove android-sdk-platform-tools || true
          sudo rm -rf /usr/local/lib/android
          sudo apt-get remove -y '^dotnet-.*|^aspnetcore-.*' || true
          sudo rm -rf /usr/share/dotnet
          sudo apt-get remove -y '^mono-.*' || true
          sudo apt-get remove -y '^ghc-.*' || true
          sudo apt-get remove -y '.*jdk.*|.*jre.*' || true
          sudo apt-get remove -y 'php.*' || true
          sudo apt-get remove -y hhvm || true
          sudo apt-get remove -y powershell || true
          sudo apt-get remove -y firefox || true
          sudo apt-get remove -y monodoc-manual || true
          sudo apt-get remove -y msbuild || true
          sudo apt-get remove -y microsoft-edge-stable || true
          sudo apt-get remove -y '^google-.*' || true
          sudo apt-get remove -y azure-cli || true
          sudo apt-get remove -y '^mongo.*-.*|^postgresql-.*|^mysql-.*|^mssql-.*' || true
          sudo apt-get remove -y '^gfortran-.*' || true
          sudo apt-get remove -y '^gcc-*' || true
          sudo apt-get remove -y '^g++-*' || true
          sudo apt-get remove -y '^cpp-*' || true
          sudo apt-get remove -y 'snapd' || true
          sudo apt-get remove -y 'linux-azure-6.5-headers-6.5.0-1021' || true
          sudo apt-get remove -y 'r-base-core' || true
          sudo apt-get remove -y 'vim-runtime' || true
          sudo apt-get remove -y 'humanity-icon-theme' || true
          sudo apt-get remove -y 'ruby3.0-doc' || true
          sudo apt-get remove -y 'mercurial-common' || true
          sudo apt-get remove -y '*perl*' || true
          sudo apt-get remove -y '*python*' || true
          sudo apt-get remove -y '*ruby*' || true
          sudo apt-get autoremove -y
          sudo apt-get clean
          echo
          echo "Listing top largest packages"
          pkgs=$(dpkg-query -Wf '${Installed-Size}\t${Package}\t${Status}\n' | awk '$NF == "installed"{print $1 "\t" $2}' | sort -nr)
          head -n 90 <<< "${pkgs}"
          echo
          sudo rm -rfv build || true
          df -h
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Install earthly
        uses: Luet-lab/luet-install-action@v1.1
        with:
          repository: quay.io/kairos/packages
          packages: utils/earthly
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}
      - name: Build  ðŸ”§
        run: |
          earthly -P +all-arm \
            -VARIANT=standard \
            -MODEL=rpi4 \
            -K3S_VERSION=1.29.4 \
            -FLAVOR=ubuntu \
            -FLAVOR_RELEASE=22.04 \
            -FAMILY=ubuntu \
            -BASE_IMAGE=ubuntu:22.04
      - name: Convert all json files into a reports.tar.gz file
        run: |
          cd build
          filename=$(ls *-grype.json | head -n 1) && filename=${filename%%-grype.json}
          sudo tar cvf "${filename}-scan-reports.tar.gz" *.json
      - name: Sign image
        env:
          COSIGN_YES: true
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          export IMAGE=$(cat build/IMAGE)
          docker push "$IMAGE" # Otherwise .RepoDigests will be empty for some reason
          cosign sign $(docker image inspect --format='{{index .RepoDigests 0}}' "$IMAGE")
      - name: size of docker images
        if: always()
        run: |
          docker images --format "{{.Size}} - {{.Repository}}:{{.Tag}}"
